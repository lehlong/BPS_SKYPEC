@model IList<T_MD_KHOAN_MUC_HANG_HOA>
@using SMO.Core.Entities;
@using SMO.Core.Entities.MD;
@using System.Text;
@using SMO.Service.Class;

@{
    var detailCostElements = ViewBag.detailCostElements as IList<T_MD_TEMPLATE_DETAIL_KE_HOACH_CHI_PHI>;
    var costCFHeader = ViewBag.costCFHeader as T_BP_KE_HOACH_CHI_PHI_VERSION;
    var dataCenterModel = ViewBag.dataCenterModel as ViewDataCenterModel;
    var lstDepartment = SelectListUtilities.GetAllCostCenter().ToList();
    var orgCode = dataCenterModel.ORG_CODE;
    var reference = dataCenterModel.TEMPLATE_CODE;
    var year = dataCenterModel.YEAR;
    var version = dataCenterModel.VERSION;
}

<style>
    .icon-function {
        cursor: pointer;
    }

    .table-screen {
        height: calc(100vh - 162px);
        margin-bottom: 0
    }

    .full-screen-table {
        height: calc(100vh -100px) !important;
    }

    .input-edit {
        background: none;
        border: none;
        text-align: right;
        width: 100%;
    }

    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>

@if (Model == null || Model.Count == 0 ||
    detailCostElements == null || detailCostElements.Count == 0 || costCFHeader == null)
{
    Html.RenderPartial("_NothingData");
}
else
{
    Html.RenderPartial("_PartialViewSearchAndDetail", dataCenterModel);
    <div class="export-left-tab">
        <div role="tabpanel" class="tab-pane fade in active" id="month">
            @*Html.RenderPartial("_PartialViewSearchAndDetail", dataCenterModel);*@
            <div class="sticky-table sticky-headers sticky-ltr-cells table-screen table">
                <table class="table-condensed table-bordered table-striped font-13 table-zoom" id="table_month">
                    <tbody>
                        <tr class="sticky-row strong align-center" data-xls-row="header">
                            <td rowspan="3" colspan="4">CHỈ TIÊU</td>
                            <td colspan="@(detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Count() * 2 + 3)">KẾ HOẠCH CHI TIẾT</td>
                            <td colspan="4">Ý KIẾN PHÒNG KỸ THUẬT</td>
                        </tr>
                        <tr class="sticky-row strong align-center" data-xls-row="header">
                            <td colspan="@(detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Count())">SỐ LƯỢNG</td>
                            <td rowspan="2">CỘNG</td>
                            <td rowspan="2">ĐƠN GIÁ</td>
                            <td colspan="@(detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Count())">THÀNH TIỀN</td>
                            <td rowspan="2">CỘNG</td>
                            <td rowspan="2">SỐ LƯỢNG</td>
                            <td rowspan="2">ĐƠN GIÁ</td>
                            <td rowspan="2">THÀNH TIỀN</td>
                            <td rowspan="2">GHI CHÚ</td>
                        </tr>
                        <tr class="sticky-row strong align-center" data-xls-row="header">
                            @foreach (var sb in detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                            {
                                <td>@sb.Center.SanBay.CODE</td>
                            }
                            @foreach (var sb in detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                            {
                                <td>@sb.Center.SanBay.CODE</td>
                            }
                        </tr>


                        @foreach (var item in Model.OrderBy(x => x.CODE).GroupBy(x => x.CODE).Select(x => x.First()))
                        {
                            var space = new StringBuilder();
                            for (int i = 0; i < item.LEVEL; i++)
                            {
                                space.Append("\t");
                            }
                            var classParent = item.IS_GROUP ? "strong" : string.Empty;
                            var isEdit = item.IS_GROUP ? "disabled" : "";
                            <tr class="@classParent">
                                @if (!string.IsNullOrEmpty(item.CODE))
                                {
                                    <td><i class="material-icons icon-function" data-toggle="modal" data-target="#exampleModal" id="@item.CODE" onclick="ShowComment('@item.CODE')">comment</i></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                @if (!string.IsNullOrEmpty(item.CODE))
                                {
                                    <td><i class="material-icons icon-function" data-toggle="modal" data-target="#ModalAssign" id="Assign_@item.CODE" onclick="ShowAssignDepartment('@item.CODE')">group_add</i></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                @if (!string.IsNullOrEmpty(item.CODE) && item.IS_GROUP == false)
                                {
                                    <td><i class="material-icons icon-function" onclick="getHistoryEditElement('@item.CODE')">history</i></td>
                                }
                                else
                                {
                                    <td></td>
                                }

                                <td style="max-width:360px"><div class="pre-whitespace @classParent">@($"{space.ToString()}{item.NAME}")</div></td>

                                @*Số lượng*@
                                @foreach (var sb in detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                                {
                                    var value = Model.FirstOrDefault(x => x.CENTER_CODE == sb.CENTER_CODE && x.CODE == item.CODE)?.Values[0].ToStringVN();
                                    <td class="align-right"><input type="number" class="input-edit" onchange="onEditCell('SL', '@sb.Center.SAN_BAY_CODE','@sb.Center.COST_CENTER_CODE', '@item.CODE', this.value)" value="@(value == "0" ? "" : value)" @isEdit/></td>
                                }

                                <td class="align-right">@(Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[0]).ToStringVN() == "0" ? "" : Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[0]).ToStringVN())</td>
                                
                                @*Đơn giá*@
                                <td class="align-right"><input type="number" class="input-edit" @isEdit  onchange="onEditCell('DG', '','', '@item.CODE', this.value)" value="@(Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[1].ToStringVN() == "0" ? "" : Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[1].ToStringVN())"/></td>

                                @foreach (var sb in detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                                {
                                    <td class="align-right">@(Model.FirstOrDefault(x => x.CENTER_CODE == sb.CENTER_CODE && x.CODE == item.CODE)?.Values[2].ToStringVN())</td>
                                }

                                <td class="align-right">@(Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[2]).ToStringVN())</td>
                                <td class="align-right"><input type="number" class="input-edit" @isEdit onchange="onEditCell('SL_TD', '','', '@item.CODE', this.value)" value="@(Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[3].ToStringVN() == "0" ? "" : Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[3].ToStringVN())" /></td>
                                <td class="align-right"><input type="number" class="input-edit" @isEdit onchange="onEditCell('DG_TD', '','', '@item.CODE', this.value)" value="@(Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[4].ToStringVN() == "0" ? "" : Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[4].ToStringVN())" /></td>
                                <td class="align-right">@(Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[5].ToStringVN() == "0" ? "" : Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[5].ToStringVN())</td>
                                <td class="align-right"><input type="text" class="input-edit" @isEdit onchange="onEditCell('GC_TD', '','', '@item.CODE', this.value)" value="@item.DESCRIPTION_TD" /></td>
                            </tr>

                        }

                    </tbody>
                </table>
            </div>
        </div>
        @*Modal*@
        <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="MaKhoanMuc" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="MaKhoanMuc" value=""></h5>
                    </div>
                    <div class="modal-body">
                        <div class="input-group" style="margin-bottom:0px;">
                            <div class="form-line">
                                <input type="text" id="txtContent"
                                       Org_Code="@dataCenterModel.ORG_CODE"
                                       Reference_code="@dataCenterModel.TEMPLATE_CODE"
                                       year="@dataCenterModel.YEAR"
                                       version="@dataCenterModel.VERSION"
                                       placeholder="Type a comment" style="padding: 10px 10px;width:100%;" />
                            </div>
                            <span class="input-group-addon" onclick="SendComment()">
                                <i class="material-icons" style="font-size: 35px; cursor: pointer;">send</i>
                            </span>
                        </div>

                        <div id="commentList">

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>


        @*ModalAssign*@
        <div class="modal fade" id="ModalAssign" tabindex="-1" role="dialog" aria-labelledby="MaKhoanMuc" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="MaKhoanMucAssign" value=""></h5>
                    </div>
                    <div class="modal-body">
                        <div class="input-group" style="margin-bottom:0px;">
                            <div class="form-line">
                                <select class="form-control selectpicker show-tick selectFollowers" id="DEPARTMENT" data-container="body" data-live-search="true" data-val="False"  tabindex="-98" multiple>
                                    @foreach (var item in ProfileUtilities.UserOrg)
                                    {
                                        if (item.ORG_CODE == ProfileUtilities.User.ORGANIZE_CODE)
                                        {
                                            <option value="@item.ORG_CODE" selected>@item.Organize.NAME - @(item?.Organize?.SAP_CODE)</option>
                                        }
                                        else
                                        {
                                            <option value="@item.ORG_CODE">@item.Organize.NAME - @(item?.Organize?.SAP_CODE)</option>
                                        }
                                    }
                                </select>
                            </div>
                            <span class="input-group-addon" onclick="SendAssign()">
                                <i class="material-icons" style="font-size: 35px; cursor: pointer;">send</i>
                            </span>
                        </div>

                        <div id="departmentList">

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).on("keyup", "#text-search-table", () => SearchTable(5, 0, 4, 5));
        function mask(e) {
            $(e).inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'digits': 3, 'autoGroup': true, 'autoUnmask': true });
        }
        function SaveSelected() {
            var selectElement = document.getElementById("DEPARTMENT");

            var options = selectElement.options;

            // Mảng để lưu trữ các giá trị được chọn
            var selectedValues = [];

            // Lặp qua từng option và kiểm tra xem có được chọn không
            for (var i = 0; i < options.length; i++) {
                if (options[i].selected) {
                    // Nếu được chọn, thêm giá trị vào mảng
                    selectedValues.push(options[i].value);
                }
            }
            $.each(selectedValues, function (index, value) {
                $(".selectFollowers").find("option[value='" + value + "']").prop("selected", true);
            });
            $(function () {
                Forms.CompleteUI();
            });
        }
        function GetCommentAll() {
            $.ajax({
                url: '@Url.Action("List","CommentDetails")',
                type: "GET",
                dataType: 'json',
                success: function (response) {
                    console.log(response);
                    for (let i = 0; i < response.length; i++) {
                        var item = response[i];
                        var code = item.ELEMENT_CODE;
                        if (!$('#' + code).hasClass('col-fecon')) {
                            $('#' + code).addClass('col-fecon');
                        }
                    }
                },
                error: Forms.AjaxErrorHandler
            });
        }
        GetCommentAll();

        function ShowComment(code) {
            $('#txtContent').val('');
            $.ajax({
                url: '@Url.Action("CommentKM")',
                type: "POST",
                data: {
                    code: code,
                },
                dataType: 'json',
                success: function (response) {
                    if (response.khoanmuc != null) {
                        $('#MaKhoanMuc').val(response.khoanmuc.CODE);
                        $('#MaKhoanMuc').text(response.khoanmuc.CODE + "-" + response.khoanmuc.NAME)
                    }
                    else {
                        $('#MaKhoanMuc').text("Comment tổng");
                    }
                    GetListComment(response.khoanmuc.CODE);
                },
                error: Forms.AjaxErrorHandler
            });
        }



        function SendComment() {
            var code = $('#MaKhoanMuc').val();
            var content = $('#txtContent').val();
            var orgCode = $("#txtContent").attr("Org_Code");
            var referenceCode = $("#txtContent").attr("Reference_code");
            var year = $("#txtContent").attr("year");
            var version = $("#txtContent").attr("version");
            if (content == "") {
                return;
            }
            $.ajax({
                url: '@Url.Action("Create", "CommentDetails")',
                type: "POST",
                data: {
                    code: code,
                    content: content,
                    orgCode: orgCode,
                    referenceCode: referenceCode,
                    year: year,
                    version: version
                },
                dataType: 'json',
                success: function (response) {
                    if (response.code) {
                        GetListComment(response.code);
                        GetCommentAll();
                    }
                    else return;
                },
                error: Forms.AjaxErrorHandler
            });
            $('#txtContent').val('');
        }
        function GetListComment(code) {
            $.ajax({
                url: '@Url.Action("List","CommentDetails")',
                type: "POST",
                data: {
                    code: code
                },
                dataType: 'json',
                success: function (response) {
                    $('#commentList').html('');
                    for (let i = 0; i < response.length; i++) {
                        var item = response[i];
                        var timestamp = parseInt(item.CREATE_DATE.match(/\d+/)[0]);
                        var createDate = new Date(timestamp); // Tạo đối tượng ngày từ số milliseconds

                        // Định dạng ngày giờ thành chuỗi "dd/MM/yyyy HH:mm:ss"
                        var formattedDate = createDate.toLocaleString("vi-VN", { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        var html = `
                        <div class="row-comment">
                        <label>${item.CREATE_BY}</label>
                        <div class="comment-time">
                        <span>${formattedDate}</span>
                            <br>
                             <span>Version: ${item.VERSION}</span>
                            </div>
                            <br />
                            <span class="comment-content">${item.CONTENT}</span>
                        </div>
                     `
                        $('#commentList').append(html);

                    }
                },
                error: Forms.AjaxErrorHandler
            })
        }

        function ShowAssignDepartment(code) {
            var selectElement = document.getElementById("DEPARTMENT");
            selectElement.selectedIndex = -1;
            for (var i = 0; i < selectElement.options.length; i++) {
                var option = selectElement.options[i];

                if (option.value === '@orgCode') {
                    option.selected = true;
                    break;
                }
            }
            SaveSelected();
            $.ajax({
                url: '@Url.Action("AssignKM")',
                type: "POST",
                data: {
                    code: code,
                },
                dataType: 'json',
                success: function (response) {
                    if (response.khoanmuc != null) {
                        $('#MaKhoanMucAssign').val(response.khoanmuc.CODE);
                        $('#MaKhoanMucAssign').text(response.khoanmuc.CODE + "-" + response.khoanmuc.NAME)
                    }
                    else {
                        $('#MaKhoanMucAssign').text("Assign tổng");
                    }
                    GetListDepartment(response.khoanmuc.CODE);
                },
                error: Forms.AjaxErrorHandler
            });
        }

        function GetDepartmentAll() {
            $.ajax({
                url: '@Url.Action("List","AssignDepartment")',
                type: "GET",
                dataType: 'json',
                success: function (response) {
                    console.log(response);
                    for (let i = 0; i < response.length; i++) {
                        var item = response[i];
                        var code = item.ELEMENT_CODE;
                        if (!$('#Assign_' + code).hasClass('col-fecon')) {
                            $('#Assign_' + code).addClass('col-fecon');
                        }
                    }
                },
                error: Forms.AjaxErrorHandler
            });
        }
        GetDepartmentAll();

        function SendAssign() {
            var code = $('#MaKhoanMucAssign').val();
            var department = $('#DEPARTMENT').val();
            var orgCode = '@orgCode';
            var referenceCode = '@reference';
            var year = '@year';
            var version = '@version';
            console.log(department);
            if (department == null) {
                return;
            }
            $.ajax({
                url: '@Url.Action("Create", "AssignDepartment")',
                type: "POST",
                data: {
                    code: code,
                    department: department,
                    orgCode: orgCode,
                    referenceCode: referenceCode,
                    year: year,
                    version: version
                },
                dataType: 'json',
                success: function (result) {
                    Message.execute(result);
                    if (result.Data.code) {
                        GetListDepartment(result.Data.code);
                        GetDepartmentAll();
                    }
                    else return;
                },
                error: Forms.AjaxErrorHandler
            });
            $('#DEPARTMENT').selectedIndex = -1;
        }

        function GetListDepartment(code) {
            var lstDepartment = @Html.Raw(Json.Encode(lstDepartment));
            $.ajax({
                url: '@Url.Action("List","AssignDepartment")',
                type: "POST",
                data: {
                    code: code
                },
                dataType: 'json',
                success: function (response) {
                    $('#departmentList').html('');
                    for (let i = 0; i < response.length; i++) {
                        var item = response[i];
                        let name = null;
                        $.each(lstDepartment, function (index, value) {
                            if (item.DEPARTMENT == value.Value) {
                                name = value.Text;
                            }
                        });
                        var timestamp = parseInt(item.CREATE_DATE.match(/\d+/)[0]);
                        var createDate = new Date(timestamp); // Tạo đối tượng ngày từ số milliseconds

                        // Định dạng ngày giờ thành chuỗi "dd/MM/yyyy HH:mm:ss"
                        var formattedDate = createDate.toLocaleString("vi-VN", { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' });
                        var html = `
                        <div class="row-comment">
                        <label>Người tạo:${item.CREATE_BY}</label>
                        <div class="comment-time">
                        <span>${formattedDate}</span>
                            <br>
                             <span>Version: ${item.VERSION}</span>
                            </div>
                            <br />
                            <span class="comment-content">${name}</span>
                        </div>
                     `
                        $('#departmentList').append(html);

                    }
                },
                error: Forms.AjaxErrorHandler
            })
        }

        function onEditCell(type, sanBay, costCenter, elementCode, value) {
            if (value == null || value == "") {
                return;
            }
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/KeHoachChiPhi/UpdateCellValue',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    type: type,
                    sanBay: sanBay,
                    costCenter: costCenter,
                    elementCode: elementCode,
                    value: value
                },
                dataType: 'json',
                success: function (response) {
                    Message.execute(response);
                }
            };
            Forms.Ajax(ajaxParams);
        }

        function getHistoryEditElement(elementCode) {
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/KeHoachChiPhi/GetHistoryEditElement',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    elementCode: elementCode,
                },
            };
            Forms.LoadAjaxModalLarge(ajaxParams);
        }
    </script>
}
