@model IList<T_MD_KHOAN_MUC_VAN_CHUYEN>
@using SMO.Core.Entities.BP.KE_HOACH_VAN_CHUYEN;
@using SMO.Core.Entities.MD;
@using System.Text;
@using SMO.Service.Class;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@{
    var detailCostElements = ViewBag.detailCostElements as IList<T_MD_TEMPLATE_DETAIL_KE_HOACH_VAN_CHUYEN>;
    var costCFHeader = ViewBag.costCFHeader as T_BP_KE_HOACH_VAN_CHUYEN_VERSION;
    var dataCenterModel = ViewBag.dataCenterModel as ViewDataCenterModel;
    var dataOrder = ViewBag.dataOrder as List<T_MD_KHOAN_MUC_VAN_CHUYEN>;
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var lstSanBay = SelectListUtilities.GetListSanBay();
    var org = ProfileUtilities.User.ORGANIZE_CODE;
    var grid = Guid.NewGuid().ToString("N");
    var tempalteCode = dataCenterModel.TEMPLATE_CODE;
    var year = dataCenterModel.YEAR;
    var version = dataCenterModel.VERSION;
    var jsonData = dataOrder.OrderBy(x => x.C_ORDER).Select(x => new
    {
        Id = x.C_ORDER.ToString(),
        Parent = x.ParentOrder,
        Code = x.CODE,
        Name = x.NAME,
        ValuesSL = x.ValuesSL.ToStringVN(),
        ValuesCL = x.ValuesCL.ToStringVN(),
        ValuesSC = x.ValuesSC.ToStringVN(),
        ValuesT = x.ValuesT.ToStringVN(),
        ValuesM3 = x.ValuesM3.ToStringVN(),
        ValuesTVTB = x.ValuesTVTB.ToStringVN(),
        ValuesTVC = x.ValuesTVC.ToStringVN(),
        ValuesTVT = x.ValuesTVT.ToStringVN(),
        ValuesTN = x.ValuesTN.ToStringVN(),
        ValuesLCT =  ( x.ValuesT * x.ValuesCL).ToStringVN(),
        ValuesLCM3 = ( x.ValuesM3*x.ValuesCL).ToStringVN(),
        IsBold = x.Isbold,
        isChecked = x.IsChecked
    });

}

<style>
    .header-year {
        background-color: #FFFFFF !important;
    }

    td {
        overflow: hidden;
    }

    .resize-col {
        resize: horizontal;
        overflow: hidden;
        display: block;
    }

    td .input-edit {
        border: none;
        background: border-box;
        width: 100%;
        text-align: right;
    }

    .table-screen {
        height: calc(100vh - 162px);
        margin-bottom: 0
    }

    .full-screen-table {
        height: calc(100vh -100px) !important;
    }

    .hiden_column {
        display: none;
    }

    .row-bold .dhx_grid-cell, .row-bold .dhx_tree-cell {
        font-weight: bold
    }
</style>

@if (Model == null || Model.Count == 0 ||
    detailCostElements == null || detailCostElements.Count == 0 || costCFHeader == null)
{
    Html.RenderPartial("_NothingData");
}
else
{
    var isShow = org == "1000" ? true : false;
    var colRow1 = isShow ? 6 : 5;
    var colRow2 = isShow ? 4 : 3;
    var isHiden = isShow ? "" : "hiden_column";
    Html.RenderPartial("_PartialViewSearchAndDetail", dataCenterModel);
    <div class="export-left-tab">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation" class="active" style="cursor: pointer; left: 0;">
                <a href="#month" title="Kế hoạch theo tháng" data-toggle="tab">Kế hoạch theo khu vực</a>
            </li>
        </ul>

        <div class="tab-content" style="padding-bottom:0">
            <div role="tabpanel" class="tab-pane fade in active tab_data" id="month">
                <div style="height: calc(100vh - 250px);" id="@grid"></div>
            </div>
        </div>

    </div>

    <script>
        const rawData = @Html.Raw(JsonConvert.SerializeObject(jsonData, jsonSerializeSettings));
        const rawDataorg = @Html.Raw(JsonConvert.SerializeObject(org));
        console.log(rawDataorg)
        let columns = [
            { id: "code", header: [{ text: "Mã", align: "center", rowspan: 2 }, { text: "", align: "center" }, { content: "inputFilter" }], minWidth: 180 },
            { id: "name", header: [{ text: "Tuyến đường", align: "center", rowspan: 2 }, { text: "", align: "center" }, { content: "inputFilter" }], minWidth: 180 },
            {
                id: "check", header: [
                    { text: "", align: 'center', rowspan: 3 },
                ],
                adjust: false,
                width: 40,
                align: 'center',
                template: (value, row, col) => {
                    var isChecked = row.isChecked ? "checked" : "";
                    return row.name? `<input type="checkbox" ${isChecked} class="filled-in chkItem" name="chkItem" id="chkItem${row.code}" modelId="${row.code}" style="margin:0;" onchange="IsDoneExpertise($(this).is(':checked'), $(this).attr('modelId'))" />
<label for="chkItem${row.code}"></label>`:`<div></div>`
                },
                htmlEnable: true,
            },
        /*    { id: "valuesSL", header: [{ text: "Sản lượng tra nạp (năm)", align: "center", rowspan: 3 },],align: "right", minWidth: 135 },*/
            { id: "valuesCL", header: [{ text: "Cự ly vận chuyển có hàng (Km)", align: "center", rowspan: 3 },], align: "right", minWidth: 135 },

        ];
        if (!rawDataorg.includes("100005")) {
            columns.push(
                { id: "valuesSC", header: [{ text: "Số chuyến VC (ch/xe/ngày)", align: "center", rowspan: 3 },], align: "right", minWidth: 145 },
                { id: "valuesT", header: [{ text: "Kế hoạch sản lượng vận chuyển năm", align: "center", colspan: 3 }, { text: "Tấn", align: "center" }], align: "right", minWidth: 130 },
                { id: "valuesM3", header: [{ text: "", align: "center" }, { text: "M3", align: "center" }], align: "right", minWidth: 130 },
                //{ id: "valuesTVTB", header: [{ text: "", align: "center" }, { text: "Trong đó", align: "center", colspan: 4 }, { text: "Tự vận trung bình", align: "center" }], align: "right", minWidth: 180 },
                //{ id: "valuesTVC", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "Tự vận cao", align: "center" }], align: "right", minWidth: 180 },
                //{ id: "valuesTVT", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "Tự vận thấp", align: "center" }], align: "right", minWidth: 180 },
                { id: "valuesTN", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "Thuê ngoài", align: "center" }], align: "right", minWidth: 190 },
                { id: "valuesLCT", header: [{ text: "Kế hoạch sản lượng luân chuyển năm", align: "center", colspan: 2 }, { text: "Tấn.km", align: "center", rowspan: 2 }], align: "right", minWidth: 145 },
                { id: "valuesLCM3", header: [{ text: "", align: "center" }, { text: "M3.km", align: "center", rowspan: 2 }], align: "right", minWidth: 145 },
            )
        }
        else {
            columns.push(
                { id: "valuesSC", header: [{ text: "Số chuyến VC (ch/xe/ngày)", align: "center", rowspan: 3 },], align: "right", minWidth: 155 },
                { id: "valuesT", header: [{ text: "Kế hoạch sản lượng vận chuyển năm", align: "center", colspan: 2 }, { text: "Tấn", align: "center" }], align: "right", minWidth: 140 },
                { id: "valuesM3", header: [{ text: "", align: "center" }, { text: "M3", align: "center" }], align: "right", minWidth: 140 },
                //{ id: "valuesTVTB", header: [{ text: "", align: "center" }, { text: "Trong đó", align: "center", colspan: 4 }, { text: "Tự vận trung bình", align: "center" }], align: "right", minWidth: 180 },
                //{ id: "valuesTVC", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "Tự vận cao", align: "center" }], align: "right", minWidth: 180 },
                //{ id: "valuesTVT", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "Tự vận thấp", align: "center" }], align: "right", minWidth: 180 },
                { id: "valuesLCT", header: [{ text: "Kế hoạch sản lượng luân chuyển năm", align: "center", colspan: 2 }, { text: "Tấn.km", align: "center", rowspan: 2 }], align: "right", minWidth: 155 },
                { id: "valuesLCM3", header: [{ text: "", align: "center" }, { text: "M3.km", align: "center", rowspan: 2 }], align: "right", minWidth: 155 },
            )
        }
        rawData.forEach((item) => {
            if (item.parent == null) {
                delete item.parent
            }
        });

         const treeGrid = new dhx.TreeGrid("@grid", {
         columns,
         leftSplit: 1,
         resizable: true,
         keyNavigation: true,
         rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
         selection: "row",
         rowHeight: 30,
         data: rawData,
         });

        treeGrid.closeAll();

        $(document).on("keyup", "#text-search-table", () => SearchTable(5, 0, 4, 5));
        function mask(e) {
            $(e).inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'digits': 3, 'autoGroup': true, 'autoUnmask': true });
        }
        function HandleSearch(inputElement) {
            var value = inputElement.value.toLowerCase();
            var table = document.getElementById("table_month");
            var tr = table.getElementsByTagName('tr');
            var searchColumns = [0, 1]; // Chỉ định các cột bạn muốn tìm kiếm, ở đây là cột 0 và cột 1

            for (let i = 3; i < tr.length; i++) {
                var matchFound = false;

                for (let j = 0; j < searchColumns.length; j++) {
                    var indexCell = searchColumns[j];
                    var td = tr[i].getElementsByTagName('td')[indexCell];
                    if (td) {
                        var txtValue = td.textContent || td.innerText;
                        if (txtValue.toLowerCase().indexOf(value) > -1) {
                            matchFound = true;
                            break; // Nếu đã tìm thấy kết quả, thoát khỏi vòng lặp
                        }
                    }
                }

                if (matchFound) {
                    tr[i].style.display = ''; // Hiển thị hàng nếu có kết quả khớp
                } else {
                    tr[i].style.display = 'none'; // Ẩn hàng nếu không có kết quả khớp
                }
            }
        }
         function IsDoneExpertise(isCheck, element) {
       var originalCheckboxState = $('#chkItem' + element).prop('checked');

    if (!isCheck) {
        Swal.fire({
            title: "Lưu ý?",
            text: "Hạng mục này đã được thẩm định! Hành động này sẽ không được lưu lại!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Đồng ý",
            cancelButtonText: "Huỷ"
        }).then((result) => {
            if (result.isConfirmed) {
                var ajaxParams = {
                    url: 'BP/KeHoachVanChuyen/UnExpertise',
                    type: 'POST',
                    data: {
                        templateCode: '@tempalteCode',
                        version: '@version',
                        year: '@year',
                        elementCode: element,
                    },
                    dataType: 'json',
                    success: function (response) {
                        Message.execute(response)
                    }
                };
                Forms.Ajax(ajaxParams);
            }
            else {
                $('#chkItem' + element).prop('checked', !originalCheckboxState);
            }
        });
        return;
    } else {
        Swal.fire({
            title: "Lưu ý?",
            text: "Bạn có chắc hoàn thành thẩm định chỉ tiêu này?",
            icon: "question",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Đồng ý",
            cancelButtonText: "Huỷ"
        }).then((result) => {
            if (result.isConfirmed) {
                var ajaxParams = {
                    url: 'BP/KeHoachVanChuyen/Expertise',
                    type: 'POST',
                    data: {
                        templateCode: '@tempalteCode',
                        version: '@version',
                        year: '@year',
                        elementCode: element,
                    },
                    dataType: 'json',
                    success: function (response) {
                        Message.execute(response)
                    }
                };
                Forms.Ajax(ajaxParams);
            }
            else {
                $('#chkItem' + element).prop('checked', !originalCheckboxState);
            }
        });
    }
}


    </script>
}
