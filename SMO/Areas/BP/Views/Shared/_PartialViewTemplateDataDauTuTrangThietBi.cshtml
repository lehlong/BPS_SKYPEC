@model IList<T_MD_KHOAN_MUC_DAU_TU>
@using SMO.Core.Entities.BP.DAU_TU_TRANG_THIET_BI;
@using SMO.Core.Entities.MD;
@using System.Text;
@using SMO.Service.Class;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    var detailCostElements = ViewBag.detailCostElements as IList<T_MD_TEMPLATE_DETAIL_DAU_TU_TRANG_THIET_BI>;
    var costCFHeader = ViewBag.costCFHeader as T_BP_DAU_TU_TRANG_THIET_BI_VERSION;
    var dataCenterModel = ViewBag.dataCenterModel as ViewDataCenterModel;
    var lstData = ViewBag.lstProject as List<T_BP_DAU_TU_TRANG_THIET_BI_DATA>;
    var lstProject = lstData.Select(x => x.DauTuTrangThietBiProfitCenter).ToList();
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var tempalteCode = dataCenterModel.TEMPLATE_CODE;
    var year = dataCenterModel.YEAR;
    var version = dataCenterModel.VERSION;
    var grid = Guid.NewGuid().ToString();

    var lstSanBay = SelectListUtilities.GetListSanBay();
    var jsonData = Model.Select(x => new
    {
        id = x.PKID,
        projectCode = x.PROJECT_CODE,
        code = x.CODE,
        type = x.TYPE,
        isBold = x.IS_GROUP,
        name = x.PROJECT_NAME,
        parent = x.PARENT_CODE,
        value1 = x.VALUETTB_1.ToStringVN(),
        value2 = x.VALUETTB_2,
        value3 = x.VALUETTB_3,
        value4 = x.VALUETTB_4,
        value5 = x.VALUETTB_5.ToStringVN(),
        value6 = x.VALUETTB_6.ToStringVN(),
        value7 = (x.VALUETTB_5 * x.VALUETTB_6).ToStringVN(),
        value8 = x.VALUETTB_8,
        value9 = x.VALUETTB_9.ToStringVN(),
        value10 = x.VALUETTB_10,

        description = x.DESCRIPTION,
        isChecked = x.IsChecked
    });
}

<style>
    .header-year {
        background-color: #FFFFFF !important;
    }

    .icon-function {
        cursor: pointer;
    }

    td {
        overflow: hidden;
    }

    .resize-col {
        resize: horizontal;
        overflow: hidden;
        display: block;
    }

    td .input-edit {
        border: none;
        background: border-box;
        text-align: left;
    }

    .table-screen {
        height: calc(100vh - 162px);
        margin-bottom: 0
    }

    .full-screen-table {
        height: calc(100vh -100px) !important;
    }
    .highlight-cell .dhx_grid-cell, .highlight-cell .dhx_tree-cell {
        background: #C8E2B1
    }
</style>

@if (Model == null || Model.Count == 0)
{
    Html.RenderPartial("_NothingData");
}
else
{
    Html.RenderPartial("_PartialViewSearchAndDetail", dataCenterModel);
    <div style="height: calc(100vh - 180px);" id="@grid"></div>

    <script type="text/javascript">
        const rawData = @Html.Raw(JsonConvert.SerializeObject(jsonData, jsonSerializeSettings));
        let columns = [
            { id: "code", header: [{ text: "MÃ DỰ ÁN", align: "center", rowspan: 2 }, { text: "", align: "center" }, { content: "inputFilter" }], align: "left", minWidth: 140 },
            {
                id: "check", header: [
                    { text: "", align: 'center', rowspan: 3 },
                ],
                adjust: false,
                width: 40,
                align: 'center',
                template: (value, row, col) => {
                    var isChecked = row.isChecked ? "checked" : "";
                    //return row.code ? `<input type="checkbox" ${isChecked} class="filled-in chkItem" name="chkItem" id="chkItem${row.code}" modelId="${row.code}" style="margin:0;" onchange="IsDoneExpertise($(this).is(':checked'), $(this).attr('modelId'))" />
                    //    <label for="chkItem${row.code}"></label>` :`<div></div>`
                    return row.code ? `<input type="checkbox" ${isChecked} class="filled-in chkItem" name="chkItem" id="chkItem${row.code}"  style="margin:0;" onchange="IsDoneExpertise($(this).is(':checked'), $(this).attr('modelId'))" />
     <label for="chkItem${row.code}"></label>` : `<div></div>`
                },
                htmlEnable: true,
            },
            {
                id: "comment", header: [{ text: "", align: 'center', rowspan: 3 }, { text: "", align: "center" }],
                adjust: false,
                width: 40,
                align: 'center',
                template: (value, row, col) => {
                    return `<i class="material-icons icon-function" onclick="getCommentElement('${row.code}')">comment</i>`
                },
                htmlEnable: true,
            },
            { id: "name", header: [{ text: "TÊN DỰ ÁN", align: "center", rowspan:2 }, { text: "", align: "center" }, { content: "inputFilter" }], align: "left", minWidth: 300 },
            { id: "value1", header: [{ text: "THÔNG TIN VỀ DANH MỤC ĐẦU TƯ", align: "center", colspan: 3 }, { text: "TỔNG MỨC ĐẦU TƯ", align: "center", rowspan: 2 }], align: "right", minWidth: 200 },
            { id: "value2", header: [{ text: "", align: "center" }, { text: "NGUỒN VỐN", align: "center", rowspan: 2 }], align: "right", minWidth: 200 },
            { id: "value3", header: [{ text: "", align: "center" }, { text: "TIẾN ĐỘ THỰC HIỆN", align: "center", rowspan: 2 }], align: "right", minWidth: 200 },
            { id: "value4", header: [{ text: "GIÁ TRỊ KL CÔNG VIỆC HOÀN THÀNH", align: "center", colspan: 3 }, { text: "LUỸ KẾ ĐẾN ĐẦU KỲ LẬP KH", align: "center", rowspan: 2 }], align: "right", minWidth: 200 },
            { id: "value5", header: [{ text: "", align: "center" }, { text: "KH NĂM", align: "center", colspan:3 }, { text: "SỐ LƯỢNG", align: "center" }], align: "right", minWidth: 200 },
            { id: "value6", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "ĐƠN GIÁ", align: "center" }], align: "right", minWidth: 200 },
            { id: "value7", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "THÀNH TIỀN", align: "center" }], align: "right", minWidth: 200 },

            { id: "value8", header: [{ text: "", align: "center" }, { text: "TIẾN ĐỘ TRIỂN KHAI TH NĂM KH", align: "center", rowspan:2 }], align: "right", minWidth: 200 },
            { id: "value9", header: [{ text: "GIÁ TRỊ GIẢI NGÂN", align: "center", colspan: 2 }, { text: "LUỸ KẾ ĐẾN ĐẦU KỲ LẬP KH", align: "center", rowspan: 2 }], align: "right", minWidth: 200 },
            { id: "value10", header: [{ text: "", align: "center" }, { text: "KH NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 200 },
            { id: "description", header: [{ text: "GHI CHÚ", align: "center", rowspan: 3 }], align: "left", minWidth: 200 },

        ];

        rawData.forEach((item) => {
            if (item.parent == "") {
                delete item.parent;
            };
        });
        console.log(rawData)
        const treeGrid = new dhx.TreeGrid("@grid", {
            columns,
            data: rawData,
    /*        leftSplit: 1,*/
            resizable: true,
            keyNavigation: true,
        
            selection: 'row',
            rowHeight: 30,
        });

        let oldValue;
        treeGrid.events.on("cellClick", function (row, column) {
           
            let cellValue = treeGrid.data.getItem(row.id)[column.id];
          
            oldValue = cellValue;
            if (row.isBold) return;
            if (column.id == "code" || column.id == "name" || column.id == "comment" || column.id == "value7"){
                return;
            } 
            if (column.id != "check")
            treeGrid.editCell(row.id, column.id);
            
        });
        treeGrid.events.on("afterEditEnd", function (value, row, column) {
            if (value == oldValue) {
                return;
            }
            switch (column.id) {
                case "value1":
                    onEditCell(row.projectCode, row.type, "VALUE_1", value);
                    break;
                case "value2":
                    onEditCell(row.projectCode, row.type, "VALUE_2", value);
                    break;
                case "value3":
                    onEditCell(row.projectCode, row.type, "VALUE_3", value);
                    break;
                case "value4":
                    onEditCell(row.projectCode, row.type, "VALUE_4", value);
                    break;
                case "value5":
                    onEditCell(row.projectCode, row.type, "VALUE_5", value);
                    break;
                case "value6":
                    onEditCell(row.projectCode, row.type, "VALUE_6", value);
                    break;
                case "value7":
                    onEditCell(row.projectCode, row.type, "VALUE_7", value);
                    break;
                case "value8":
                    onEditCell(row.projectCode, row.type, "VALUE_8", value);
                    break;
                case "value9":
                    onEditCell(row.projectCode, row.type, "VALUE_9", value);
                    break;
                case "value10":
                    onEditCell(row.projectCode, row.type, "VALUE_10", value);
                    break;
                case "description":
                    onEditCell(row.projectCode, row.type, "DESCRIPTION", value);
                    break;
                default:
                    return;
            }
        });

    </script>

    <script>
        $(document).on("keyup", "#text-search-table", () => SearchTable(5, 0, 4, 5));
        function mask(e) {
            $(e).inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'digits': 3, 'autoGroup': true, 'autoUnmask': true });
        }

        function HandleSearch(inputElement) {
            var value = inputElement.value.toLowerCase();
            var table = document.getElementById("table_month");
            var tr = table.getElementsByTagName('tr');
            var searchColumns = [1, 2]; // Chỉ định các cột bạn muốn tìm kiếm, ở đây là cột 0 và cột 1

            for (let i = 3; i < tr.length; i++) {
                var matchFound = false;

                for (let j = 0; j < searchColumns.length; j++) {
                    var indexCell = searchColumns[j];
                    var td = tr[i].getElementsByTagName('td')[indexCell];
                    if (td) {
                        var txtValue = td.textContent || td.innerText;
                        if (txtValue.toLowerCase().indexOf(value) > -1) {
                            matchFound = true;
                            break; // Nếu đã tìm thấy kết quả, thoát khỏi vòng lặp
                        }
                    }
                }

                if (matchFound) {
                    tr[i].style.display = ''; // Hiển thị hàng nếu có kết quả khớp
                } else {
                    tr[i].style.display = 'none'; // Ẩn hàng nếu không có kết quả khớp
                }
            }
        }


        function getCommentElement(elementCode) {
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/DauTuTrangThietBi/GetCommentElement',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    elementCode: elementCode,
                },
            };
            Forms.LoadAjaxModal(ajaxParams);
        }
        function onEditCell(projectCode, elementCode, column, value) {
            if (value == null) {
                return;
            }
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var month = $("#month_bs").val();
            var ajaxParams = {
                url: 'BP/DauTuTrangThietBi/UpdateCellValue',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    projectCode: projectCode,
                    elementCode: elementCode,
                    value: value,
                    column: column,
                    month: month
                },
                dataType: 'json',
                success: function (response) {
                    Message.execute(response);
                }
            };
            Forms.Ajax(ajaxParams);
        }
        function IsDoneExpertise(isCheck, element) {
          
            var originalCheckboxState = $('#chkItem' + element).prop('checked');
            console.log()
            $('#chkItem' + element).prop('checked', !originalCheckboxState);
            
            if (!isCheck) {
                $('#chkItem' + element).prop('checked', !originalCheckboxState);
          Swal.fire({
              title: "Lưu ý?",
              text: "Hạng mục này đã được thẩm định! Hành động này sẽ không được lưu lại!",
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Đồng ý",
              cancelButtonText: "Huỷ"
          }).then((result) => {
              if (result.isConfirmed) {
                  $('#chkItem' + element).prop('checked', !originalCheckboxState);
                  var ajaxParams = {
                      url: 'BP/DauTuTrangThietBi/UnExpertise',
                      type: 'POST',
                      data: {
                          templateCode: '@tempalteCode',
                          version: '@version',
                          year: '@year',
                          elementCode: element,
                      },
                      dataType: 'json',
                      success: function (response) {
                          Message.execute(response)
                      }
                  };
                  Forms.Ajax(ajaxParams);
              }
              else {
                  $('#chkItem' + element).prop('checked', !originalCheckboxState);
              }
          });
          return;
            } else {
               
          Swal.fire({
              title: "Lưu ý?",
              text: "Bạn có chắc hoàn thành thẩm định chỉ tiêu này?",
              icon: "question",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Đồng ý",
              cancelButtonText: "Huỷ"
          }).then((result) => {
              if (result.isConfirmed) {
                  $('#chkItem' + element).prop('checked', !originalCheckboxState);
                  var ajaxParams = {
                      url: 'BP/DauTuTrangThietBi/Expertise',
                      type: 'POST',
                      data: {
                          templateCode: '@tempalteCode',
                          version: '@version',
                          year: '@year',
                          elementCode: element,
                      },
                      dataType: 'json',
                      success: function (response) {
                          Message.execute(response)
                      }
                  };
                  Forms.Ajax(ajaxParams);
              }
              else {
                  $('#chkItem' + element).prop('checked', !originalCheckboxState);
              }
          });
      }
  }
    </script>
}
