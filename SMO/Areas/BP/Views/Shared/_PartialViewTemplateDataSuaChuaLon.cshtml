@model IList<T_MD_KHOAN_MUC_SUA_CHUA>
@using SMO.Core.Entities.BP.SUA_CHUA_LON;
@using SMO.Core.Entities.MD;
@using System.Text;
@using SMO.Service.Class;
@using Newtonsoft.Json.Serialization;
@using Newtonsoft.Json;
@{
    var detailCostElements = ViewBag.detailCostElements as IList<T_MD_TEMPLATE_DETAIL_SUA_CHUA_LON>;
    var costCFHeader = ViewBag.costCFHeader as T_BP_SUA_CHUA_LON_VERSION;
    var dataCenterModel = ViewBag.dataCenterModel as ViewDataCenterModel;
    var orgCode = dataCenterModel.ORG_CODE;
    var tempalteCode = dataCenterModel.TEMPLATE_CODE;
    var year = dataCenterModel.YEAR;
    var version = dataCenterModel.VERSION;
    var formIdExportExcel = Guid.NewGuid().ToString();
}

<style>
    .header-year {
        background-color: #FFFFFF !important;
    }

    .icon-function {
        cursor: pointer;
    }

    td {
        overflow: hidden;
    }

    .resize-col {
        resize: horizontal;
        overflow: hidden;
        display: block;
    }

    td .input-edit {
        border: none;
        background: border-box;
        width: 100%;
        text-align: right;
    }

    .table-screen {
        height: calc(100vh - 162px);
        margin-bottom: 0
    }

    .full-screen-table {
        height: calc(100vh -100px) !important;
    }
</style>

@if (Model == null || Model.Count == 0 ||
    detailCostElements == null || detailCostElements.Count == 0 || costCFHeader == null)
{
    Html.RenderPartial("_NothingData");
}
else
{
    Html.RenderPartial("_PartialViewSearchAndDetail", dataCenterModel);
    <div class="export-left-tab">
        <div role="tabpanel" class="tab-pane fade in active" id="month">
            @*Html.RenderPartial("_PartialViewSearchAndDetail", dataCenterModel);*@
            <div class="sticky-table sticky-headers sticky-ltr-cells table-screen table">
                <table class="table-condensed table-bordered table-striped font-13 table-zoom" id="table_month">
                    <tbody>
                        <tr class="sticky-row strong" data-xls-row="header">
                            <th rowspan="2" colspan="4">HÀNH ĐỘNG</th>
                            <td class="pre-whitespace" rowspan="2" style="text-align:center">MÃ</td>
                            <td class="pre-whitespace" rowspan="2" style="text-align:center">CHỈ TIÊU</td>
                            <td class="pre-whitespace" rowspan="2">QUY MÔ</td>

                            <td class="pre-whitespace" style="text-align:center" colspan="@(detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Count() + 1)">KINH PHÍ</td>
                            <td rowspan="2">GHI CHÚ</td>
                        </tr>
                        <tr class="sticky-row strong" data-xls-row="header">
                            @foreach (var sb in detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                            {
                                <td class="pre-whitespace">@sb.Center.SAN_BAY_CODE</td>
                            }
                            <td class="pre-whitespace">Cộng</td>
                        </tr>


                        @foreach (var item in Model.OrderBy(x => x.CODE).GroupBy(x => x.CODE).Select(x => x.First()))
                        {
                            var space = new StringBuilder();
                            for (int i = 0; i < item.LEVEL; i++)
                            {
                                space.Append("\t");
                            }
                            var classParent = item.IS_GROUP ? "strong" : string.Empty;
                            var isEdit = item.IS_GROUP ? "disabled" : "";
                            var isChecked = item.IsChecked ? "checked" : "";
                            <tr class="@classParent">
                                <td>
                                    <input type="checkbox" @isChecked class="filled-in chkItem" name="chkItem" id="@("chkItem" + item.CODE)" modelId="@item.CODE" style="margin:0;" onchange="IsDoneExpertise($(this).is(':checked'), $(this).attr('modelId'))" />
                                    <label for="@("chkItem" + item.CODE)"></label>
                                </td>
                                <td><i class="material-icons icon-function" onclick="getCommentElement('@item.CODE')">comment</i></td>
                                <td><i class="material-icons icon-function" onclick="getAssignDepartmentElement('@item.CODE')">group_add</i></td>

                                @if (!string.IsNullOrEmpty(item.CODE) && item.IS_GROUP == false)
                                {
                                    <td><i class="material-icons icon-function" onclick="getHistoryEditElement('@item.CODE')">history</i></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                                <td class="pre-whitespace @classParent">@(item.CODE)</td>
                                <td class="pre-whitespace @classParent">@($"{space.ToString()}{item.NAME}")</td>
                                <td class="pre-whitespace">@(detailCostElements.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.ELEMENT_CODE == item.CODE)?.PLData.QUY_MO)</td>
                                @foreach (var sb in detailCostElements.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                                {
                                    <td class="pre-whitespace"><input class="input-edit" @isEdit onchange="EditValue('@sb.Center.SAN_BAY_CODE', '@item.CODE', this.value)" value="@(Model.FirstOrDefault(x => x.CENTER_CODE == sb.CENTER_CODE && x.CODE == item.CODE)?.Values[0].ToStringVN())" /></td>
                                }
                                <td class="pre-whitespace">@Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[0]).ToStringVN()</td>
                                <td>@item.DESCRIPTION</td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="hidden">
        <form id="@formIdExportExcel" target="_blank" method="post" action="@Url.Action("DownloadDataSCL", new { model = JsonConvert.SerializeObject(dataCenterModel)})">
        </form>
    </div>

    <script>
        $(document).on("keyup", "#text-search-table", () => SearchTable(5, 0, 4, 5));
        function mask(e) {
            $(e).inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'digits': 3, 'autoGroup': true, 'autoUnmask': true });
        }

        function DownloadDataSCL() {
            $('#@formIdExportExcel').submit();
        }

        function EditValue(sanBayCode, element, value) {
            if (value == null || value == "") {
                return;
            }
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/SuaChuaLon/EditCellValue',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    elementCode: element,
                    sanBayCode: sanBayCode,
                    value: value
                },
            };
            Forms.Ajax(ajaxParams);
        }

        function getHistoryEditElement(elementCode) {
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/SuaChuaLon/GetHistoryElement',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    elementCode: elementCode,
                },
            };
            Forms.LoadAjaxModal(ajaxParams);
        }

        function getCommentElement(elementCode) {
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/SuaChuaLon/GetCommentElement',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    elementCode: elementCode,
                },
            };
            Forms.LoadAjaxModal(ajaxParams);
        }

        function getAssignDepartmentElement(elementCode) {
            var templateCode = $("#TEMPLATE_CODE").val();
            var version = $("#VERSION").val();
            var year = $("#YEAR").val();
            var ajaxParams = {
                url: 'BP/SuaChuaLon/GetAssignDepartmentElement',
                type: "POST",
                data: {
                    templateCode: templateCode,
                    version: version,
                    year: year,
                    elementCode: elementCode,
                },
            };
            Forms.LoadAjaxModal(ajaxParams);
        }

        function IsDoneExpertise(isCheck, element) {
            var originalCheckboxState = $('#chkItem' + element).prop('checked');
            if (!isCheck) {
                Swal.fire({
                    title: "Lưu ý?",
                    text: "Hạng mục này đã được thẩm định! Hành động này sẽ không được lưu lại!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Đồng ý",
                    cancelButtonText: "Huỷ"
                }).then((result) => {
                    if (result.isConfirmed) {
                        var ajaxParams = {
                            url: 'BP/SuaChuaLon/UnExpertise',
                            type: 'POST',
                            data: {
                                templateCode: '@tempalteCode',
                                version: '@version',
                                year: '@year',
                                elementCode: element,
                            },
                            dataType: 'json',
                            success: function (response) {
                                Message.execute(response)
                            }
                        };
                        Forms.Ajax(ajaxParams);
                    }
                    else {
                        $('#chkItem' + element).prop('checked', !originalCheckboxState);
                    }
                });
                return;
            } else {
                Swal.fire({
                    title: "Lưu ý?",
                    text: "Bạn có chắc hoàn thành thẩm định chỉ tiêu này?",
                    icon: "question",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Đồng ý",
                    cancelButtonText: "Huỷ"
                }).then((result) => {
                    if (result.isConfirmed) {
                        var ajaxParams = {
                            url: 'BP/SuaChuaLon/Expertise',
                            type: 'POST',
                            data: {
                                templateCode: '@tempalteCode',
                                version: '@version',
                                year: '@year',
                                elementCode: element,
                            },
                            dataType: 'json',
                            success: function (response) {
                                Message.execute(response)
                            }
                        };
                        Forms.Ajax(ajaxParams);
                    }
                    else {
                        $('#chkItem' + element).prop('checked', !originalCheckboxState);
                    }
                });
            }
        }
    </script>
}
