@model  SMO.Models.ReportChiPhiModel
@using System.Text;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    var year = ViewBag.Year as int?;
    var lstHeader = ViewBag.Header as List<string>;
    var gridTab = Guid.NewGuid().ToString("N");
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var formIdExportExcel = Guid.NewGuid();
}
<div style="height: calc(100vh - 240px); width: 100%" id="@gridTab"></div>
<div class="hidden">
    <form id="@formIdExportExcel" target="_blank" method="post" action="@Url.Action("ExportExcelTHKHCP")">
        @Html.Hidden("year")
        @Html.Hidden("kichBan")
        @Html.Hidden("phienBan")
    </form>
</div>
<script type="text/javascript">
    var rawDataTab1 = @Html.Raw(JsonConvert.SerializeObject(Model.chiPhiInReports, jsonSerializeSettings));
    var parentData = rawDataTab1.filter(x => x.isBold == true);

    Number.prototype.format = function (n, x, s, c) {
        var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
            num = this.toFixed(Math.max(0, ~~n));

        return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
    };
    console.log(rawDataTab1)
    var ParentArray = ["6277G002B", "6277G003AB", "6277G004AB", "6277G005AB", "6277G006AB", "6277G007AB"]
    rawDataTab1.forEach(x => {

        if (ParentArray.includes(x.code)) {
            var sumCQCT = rawDataTab1.filter(y => y.code == `${x.code}1` || y.code == `${x.code}2`).map(z => z.valueCQCT).reduce((a, b) => a + b, 0);
            var sumCNMB = rawDataTab1.filter(y => y.code == `${x.code}1` || y.code == `${x.code}2`).map(z => z.valueCNMB).reduce((a, b) => a + b, 0);
            var sumCNMT = rawDataTab1.filter(y => y.code == `${x.code}1` || y.code == `${x.code}2`).map(z => z.valueCNMT).reduce((a, b) => a + b, 0);
            var sumCNVT = rawDataTab1.filter(y => y.code == `${x.code}1` || y.code == `${x.code}2`).map(z => z.valueCNVT).reduce((a, b) => a + b, 0);
            var sumMTMN = rawDataTab1.filter(y => y.code == `${x.code}1` || y.code == `${x.code}2`).map(z => z.valueCNMN).reduce((a, b) => a + b, 0);
            var sumTcty = rawDataTab1.filter(y => y.code == `${x.code}1` || y.code == `${x.code}2`).map(z => z.valueCNtcty).reduce((a, b) => a + b, 0);
            x.valueCNMB = sumCNMB;
            x.valueCNMN = sumMTMN;
            x.valueCNMT = sumCNMT;
            x.valueCNVT = sumCNVT;
            x.valueCQCT = sumCQCT
            x.valueCNtcty = sumTcty

        }
    })

    const grid = new dhx.Grid("@gridTab", {
        columns: [
            { id: "stt", header: [{ text: "STT", align: "center" }, ""], align: "center", minWidth: 100 },
            { id: "name", header: [{ text: "Danh mục chi phí", align: "center" }, { text: "TỔNG CỘNG" }] },

            { id: "valueCQCT", header: [{ text: "CQ Công ty", align: "center" }, { text: _.sumBy(parentData, "valueCQCT").format(0,3,'.',','), align: "right" }], minWidth: 160, align: "right", type: "number", format: "#.#" },
            { id: "valueCNMB", header: [{ text: "CN Miền Bắc", align: "center" }, { text: _.sumBy(parentData, "valueCNMB").format(0, 3, '.', ','), align: "right" }], minWidth: 160, align: "right", type: "number", format: "#.#" },
            { id: "valueCNMT", header: [{ text: "CN Miền Trung", align: "center" }, { text: _.sumBy(parentData, "valueCNMT").format(0, 3, '.', ','), align: "right" }], minWidth: 160, align: "right", type: "number", format: "#.#" },
            { id: "valueCNMN", header: [{ text: "CN Miền Nam", align: "center" }, { text: _.sumBy(parentData, "valueCNMN").format(0, 3, '.', ','), align: "right" }], minWidth: 160, align: "right", type: "number", format: "#.#" },
            { id: "valueCNVT", header: [{ text: "CN Vận Tải", align: "center" }, { text: _.sumBy(parentData, "valueCNVT").format(0, 3, '.', ','), align: "right" }], minWidth: 160, align: "right", type: "number", format: "#.#" },
            { id: "valueTcty", header: [{ text: "Tổng cộng", align: "center" }, { text: _.sumBy(parentData, "valueTcty").format(0, 3, '.', ','), align: "right" }], minWidth: 160, align: "right", type: "number", format: "#.#" },
        ],
        adjust: true,
        data: rawDataTab1,
        selection: "row",
        rowHeight: 30,
    topSplit:2,
        resizable: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
    });

         function ExportData() {
             $('#@formIdExportExcel #year').val($("#time-year").val());
             $('#@formIdExportExcel #phienBan').val($("#phien-ban").val());
              $('#@formIdExportExcel #kichBan').val($("#kich-ban").val());
    $('#@formIdExportExcel').submit();
    };
</script>