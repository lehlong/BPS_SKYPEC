@model List<SMO.Service.BP.ReportModel>
@using System.Text;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    var gridId = Guid.NewGuid().ToString("N");
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var formIdExportExcel = Guid.NewGuid();
}

<div style="height: calc(100vh - 240px); width: 100%" id="@gridId"></div>
<div class="hidden">
    <form id="@formIdExportExcel" target="_blank" method="post" action="@Url.Action("ExportExcelGridData")">
        @Html.Hidden("Treedata")
        @Html.Hidden("Template")
    </form>
</div>
<script type="text/javascript">
    const rawData = @Html.Raw(JsonConvert.SerializeObject(Model, jsonSerializeSettings));
    const parentData = rawData.filter((e) => { return e.isBold == true })

    rawData.unshift({
        name:"Tổng cộng",
        col1: parentData.reduce((accum, item) => accum + item.col1, 0),
        col2: parentData.reduce((accum, item) => accum + item.col2, 0),
        col3: parentData.reduce((accum, item) => accum + item.col3, 0),
        col4: parentData.reduce((accum, item) => accum + item.col4, 0),
        col5: parentData.reduce((accum, item) => accum + item.col1, 0) == 0 || parentData.reduce((accum, item) => accum + item.col4, 0) == 0 ? 0 : (parentData.reduce((accum, item) => accum + item.col4, 0) / parentData.reduce((accum, item) => accum + item.col1, 0)) * 100,
        isBold: true
    })
    let columns = [
        { id: "stt", header: [{ text: "STT", align: "center", rowspan:2 }], width: 100, align: "center" },
        { id: "name", header: [{ text: "Danh mục chi phí", align: "center" }, { content: "inputFilter" }], minWidth: 500 },
        { id: "col1", header: [{ text: "Kế hoạch năm", align: "center", rowspan: 2 }], align: "right", minWidth: 160, type: "number", format: "#.#" },
        { id: "col2", header: [{ text: "KH bổ sung, điều chỉnh (theo CV đã được phê duyệt) ", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col3", header: [{ text: "KH sau bổ sung, điều chỉnh", align: "center", rowspan: 2 }], align: "right", minWidth: 160, type: "number", format: "#.#" },
        { id: "col4", header: [{ text: "Giá trị thực hiện", align: "center", rowspan: 2 }], align: "right", minWidth: 160, type: "number", format: "#.#" },
        {
            id: "col5", header: [{ text: "% so với KH", align: "center", rowspan: 2 }], template: function (text, row, col) {
                return `<div>${Number.parseFloat(text).toFixed(3)}%</div>`;
            }, htmlEnable: true, align: "right", minWidth: 160, },

        { id: "des", header: [{ text: "Ghi chú", align: "center", rowspan: 2 }], align: "right", adjust: true},
    ]; 
    const treeGrid = new dhx.Grid("@gridId", {
        columns,
        data: rawData,
        leftSplit: 2,
        resizable: true,
        keyNavigation: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
        selection: true,
        rowHeight: 30,
    });
    console.log(parentData)
    console.log(rawData)

     function ExportData() {
        var Treedata = JSON.stringify(treeGrid.data.serialize());
        var template = "BM_2110";
        $('#@formIdExportExcel #Treedata').val(Treedata);
        $('#@formIdExportExcel #Template').val(template);
    $('#@formIdExportExcel').submit();
}
</script>





