@model List<SMO.Core.Entities.MD.T_MD_REPORT01D>
@using System.Text;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    var gridId = Guid.NewGuid().ToString("N");
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var formIdExportExcel = Guid.NewGuid();
    var data = Model.OrderBy(x=>x.C_ORDER).Select(x => new {
        ID = x.ID,
        NAME1D = x.NAME1D,
        GTDN = x.GTDN,
        KH = x.KH,
        DN9T = x.DN9T,
        TH = x.TH,
        PKH = x.PKH,
        GTCN = x.GTCN,
        TLGV = x.TLGV,
        CT = x.CT,
        TlLN = x.TlLN,
        GTGGDT = x.GTGGDT,
        TT=x.TT,
        isBold=x.ISBOLD

    });

}
<style>
    .row-bold .dhx_grid-cell, .row-bold .dhx_tree-cell {
        font-weight: bold
    }

    .grid .dhx_grid-cell {
        word-break: break-word
    }

    .dhx_header-wrapper {
        z-index: 1;
    }
</style>

<div style="height: calc(100vh - 240px); width: 100%" id="@gridId"></div>
<div class="hidden">
    <form id="@formIdExportExcel" target="_blank" method="post" action="@Url.Action("ExportExcelGridData")">
        @Html.Hidden("Treedata")
        @Html.Hidden("Template")
    </form>
</div>
<script type="text/javascript">
    var rawData = @Html.Raw(JsonConvert.SerializeObject(data));
    console.log(rawData);

    let columns = [
        { id: "TT", header: [{ text: "TT", align: "center" }], minWidth: 320 },
        { id: "NAME1D", header: [{ text: "CHỈ TIÊU", align: "center" }], minWidth: 320 },

        { id: "GTDN", header: [{ text: "GIÁ TRỊ ĐẦU TƯ THỜI ĐIỂM ĐẦU NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },

        { id: "KH", header: [{ text: "PHÁT SINH", align: "center", colspan: 4 }, { text: "KH", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "DN9T", header: ["", { text: "9T ĐN", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "TH", header: ["", { text: "TH", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "PKH", header: ["", { text: "%TH/KH", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },

        { id: "col6", header: [{ text: "GIÁ TRỊ ĐẦU TƯ THỜI ĐIỂM CUỐI NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "GTCN", header: [{ text: "TỶ LỆ VỐN GÓP (%) ĐẾN CUỐI NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "CT", header: [{ text: "CỔ TỨC HOẶC LỢI NHUẬN ĐƯỢC CHIA", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "TlLN", header: [{ text: "TY LỆ LN ĐƯỢC CHIA TRÊN VỐN ĐẦU TƯ BÌNH QUÂN", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "GTGGDT", header: [{ text: "GIÁ TRỊ ĐÃ TRÍCH LẬP DỰ PHÒNG GIẢM GIÁ ĐT", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },

    ];

    const grid = new dhx.TreeGrid("@gridId", {
        columns,
        data: rawData,
        leftSplit: 2,
        resizable: true,
        keyNavigation: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
        selection: true,
        autoHeight: true,
    });
    function ExportData() {
        var Treedata = JSON.stringify(treeGrid.data.serialize());
        var template = "BM_01E";
        $('#@formIdExportExcel #Treedata').val(Treedata);
        $('#@formIdExportExcel #Template').val(template);
        $('#@formIdExportExcel').submit();
    }
    let oldValue;
    grid.events.on("cellClick", function (row, column) {
        let cellValue = grid.data.getItem(row.id)[column.id];
        oldValue = cellValue;

        // Không cho phép edit các cột TT, Đội VT, Tuyến vận chuyển
        if (column.id == "COL1" || column.id == "COL2" || column.id == "COL5") {
            return;
        }

        grid.editCell(row.id, column.id);
    });
     grid.events.on("afterEditEnd", function (value, row, column) {
     if (value == oldValue) {
         return;
     }
         // Lấy ID thực từ dữ liệu
         const realId = grid.data.getItem(row.id).ID; // Giả sử ID là trường chứa id thực trong database
         console.log(realId);
         onEditCell(realId, column.id, value);
 });

 function onEditCell(id, column, value) {
     if (value == null) {
         return;
     }
     var year = $("#time-year").val();

     var ajaxParams = {
         url: '@Url.Action("UpdateCellValue", "Report")',
         type: "POST",
         data: {
             id: id, // Đây sẽ là ID thực từ database
             year: year,
             column: column,
             value: value
         },
         dataType: "json",
         success: function (response) {
             if (response.Type == "AlertSuccessAndJsCommand") {
                 Message.execute(response);
             } else {
                 Message.execute(response);
             }
         }
     };
     Forms.Ajax(ajaxParams);
 }
</script>

