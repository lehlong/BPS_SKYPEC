@model List<SMO.Core.Entities.MD.T_MD_REPORT01D>
@using System.Text;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;
@{
    var gridId = Guid.NewGuid().ToString("N");
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var formIdExportExcel = Guid.NewGuid();
    var data = Model.OrderBy(x=>x.C_ORDER).Select(x => new { name=x.NAME1D,
        col1=x.GTDN,
        col2=x.KH,
        col3=x.DN9T,
        col4=x.TH,
        col5= x.KH!=0? x.TH/x.KH:0,
        col6=x.GTDN+x.TH,
        col7=x.TLGV,
        col8=x.CT,
        col9=x.TlLN,
        col10=x.GTGGDT,
        TT=x.TT,
        isBold=x.ISBOLD

    });

}
<style>
    .row-bold .dhx_grid-cell, .row-bold .dhx_tree-cell {
        font-weight: bold
    }

    .grid .dhx_grid-cell {
        word-break: break-word
    }

    .dhx_header-wrapper {
        z-index: 1;
    }
</style>

<div style="height: calc(100vh - 240px); width: 100%" id="@gridId"></div>
<div class="hidden">
    <form id="@formIdExportExcel" target="_blank" method="post" action="@Url.Action("ExportExcelGridData")">
        @Html.Hidden("Treedata")
        @Html.Hidden("Template")
    </form>
</div>
<script type="text/javascript">
    var rawData = @Html.Raw(JsonConvert.SerializeObject(data));
    console.log(rawData);

    let columns = [
        { id: "TT", header: [{ text: "TT", align: "center" }], minWidth: 320 },
        { id: "name", header: [{ text: "CHỈ TIÊU", align: "center" }], minWidth: 320 },

        { id: "col1", header: [{ text: "GIÁ TRỊ ĐẦU TƯ THỜI ĐIỂM ĐẦU NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },

        { id: "col2", header: [{ text: "PHÁT SINH", align: "center", colspan: 4 }, { text: "KH", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col3", header: ["", { text: "9T ĐN", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col4", header: ["", { text: "TH", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col5", header: ["", { text: "%TH/KH", align: "center" }], align: "right", minWidth: 180, type: "number", format: "#.#" },

        { id: "col6", header: [{ text: "GIÁ TRỊ ĐẦU TƯ THỜI ĐIỂM CUỐI NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col7", header: [{ text: "TỶ LỆ VỐN GÓP (%) ĐẾN CUỐI NĂM", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col8", header: [{ text: "CỔ TỨC HOẶC LỢI NHUẬN ĐƯỢC CHIA", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col9", header: [{ text: "TY LỆ LN ĐƯỢC CHIA TRÊN VỐN ĐẦU TƯ BÌNH QUÂN", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },
        { id: "col10", header: [{ text: "GIÁ TRỊ ĐÃ TRÍCH LẬP DỰ PHÒNG GIẢM GIÁ ĐT", align: "center", rowspan: 2 }], align: "right", minWidth: 180, type: "number", format: "#.#" },

    ];

    const treeGrid = new dhx.TreeGrid("@gridId", {
        columns,
        data: rawData,
        leftSplit: 2,
        resizable: true,
        keyNavigation: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
        selection: true,
        autoHeight: true,
    });
    function ExportData() {
        var Treedata = JSON.stringify(treeGrid.data.serialize());
        var template = "BM_01E";
        $('#@formIdExportExcel #Treedata').val(Treedata);
        $('#@formIdExportExcel #Template').val(template);
        $('#@formIdExportExcel').submit();
    }
</script>

