@model IList<T_MD_KHOAN_MUC_HANG_HOA>
@using SMO.Core.Entities.MD;
@using SMO.Service.Class;
@using System.Text;
@using Newtonsoft.Json;
@{
    var gridId = Guid.NewGuid().ToString("N");
    var dataCenterModel = ViewBag.dataCenterModel as ViewDataCenterModel;
    var Chinhanh = ViewBag.Chinhanh as string;
    var SAP_CODE = ViewBag.Sap as string;
}

<style>
    .row-bold .dhx_grid-cell, .row-bold .dhx_tree-cell {
        font-weight: bold
    }
    .highlight-cell .dhx_grid-cell, .highlight-cell .dhx_tree-cell {
        background: #C8E2B1
    }

    .grid .dhx_grid-cell {
        word-break: break-word
    }
</style>

<div style="height: calc(100vh - 240px);" id="@gridId"></div>

<script type="text/javascript">
    const dataCenterModel = @Html.Raw(JsonConvert.SerializeObject(dataCenterModel));
    const rawData = @Html.Raw(JsonConvert.SerializeObject(Model.OrderBy(x => x.CODE)));
    var CN =@Html.Raw(JsonConvert.SerializeObject(Chinhanh))
    var Sap =@Html.Raw(JsonConvert.SerializeObject(SAP_CODE))
    console.log(CN)
    let idCol0
    if (rawData[0].CODE.startsWith("B62") || rawData[0].CODE.startsWith("T62") || rawData[0].CODE.startsWith("N62") || rawData[0].CODE.startsWith("VT62")) {
        idCol0 = "VPCN"
    } else if (rawData[0].CODE.startsWith("CQ62")) {
        idCol0 = "VPCT"
    }
    else
    {
        idCol0 = rawData[0].lstCenter[0].hasOwnProperty("SAN_BAY_CODE") ? rawData[0].lstCenter[0].SAN_BAY_CODE : rawData[0].lstCenter[0]._implementation.SAN_BAY_CODE;
    }


    const columns = [
        { id: "name", header: [{ text: "CHỈ TIÊU", align: "center",rowspan: 2 },"", { content: "inputFilter" }], width: 500, footer: [{ text: "TỔNG CỘNG" }] },
        {
            id: "check", header: [
                { text: "HÀNH ĐỘNG", align: 'center', colspan: 4, rowspan: 3 },
                { text: "", align: 'center' },
            ],
            adjust: false,
            width: 40,
            align: 'center',
            template: (value, row, col) => {
                var isChecked = row.isChecked ? "checked" : "";
                return row.title ? `<div></div>` : `<input type="checkbox" ${isChecked} class="filled-in chkItem" name="chkItem" id="chkItem${row.code}" modelId="${row.code}" style="margin:0;" onchange="IsDoneExpertise($(this).is(':checked'), $(this).attr('modelId'))" />
                        <label for="chkItem${row.code}"></label>`

            },
            htmlEnable: true,
        },
        {
            id: "comment", header: ["", { text: "", align: 'center' }],
            adjust: false,
            width: 40,
            align: 'center',
            template: (value, row, col) => {
                return row.title ? `<div></div>` : `<i class="material-icons icon-function" onclick="getCommentElement('${row.code}')">comment</i>`
            },
            htmlEnable: true,
        },
        {
            id: "assignDepartment", header: ["", { text: "", align: 'center' }],
            adjust: false,
            width: 40,
            align: 'center',
            template: (value, row, col) => {
                return row.title ? `<div></div>` : `<i class="material-icons icon-function" onclick="getAssignDepartmentElement('${row.code}')">group_add</i>`
            },
            htmlEnable: true,
        },
        {
            id: "history", header: ["", { text: "", align: 'center' }],
            adjust: false,
            width: 40,
            align: 'center',
            template: (value, row, col) => {
                return row.title ? `<div></div>` : `<i class="material-icons icon-function" onclick="getHistoryEditElement('${row.code}')">history</i>`
            },
            htmlEnable: true,
        }
    ];
    columns.push(
        {
            id: `quantity_${idCol0}`, header: [
                { text: "KẾ HOẠCH CHI TIẾT", colspan: rawData[0].lstCenter.length * 2 + 3, align: 'center' },
                {id:"ID_HDSL", text: "SỐ LƯỢNG", colspan: rawData[0].lstCenter.length + 1, align: 'center' },
                { text: idCol0, align: 'center', sortable: false, }
            ], align: 'right', width: 150, type: "number", format: "#.#",
        },
    );
    const sortquantity = ["VPCN", "HAN", "HPH", "THD", "VII", "VDH", "VDO"];
    const sortCQ = ["VPCT", "MB", "MT", "CR", "MN"];
    const sortMN = ["VPCN","SGN","PQC", "DLI", "VCA", "BMV","VCS"];
    const sortMT = ["VPCN", "DAD", "CXR", "HUI", "UIH", "VCL", "PXU", "TBB"];
    const sortVT = ["VPCN", "VTMB", "VTMT", "VTMN"];
    if (rawData[0].CODE.startsWith("B62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = sortquantity[i];
            columns.push({ id: `quantity_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#",  });
        };

    }
    else if (rawData[0].CODE.startsWith("T62") )
    {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = sortMT[i];
            columns.push({ id: `quantity_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else if (rawData[0].CODE.startsWith("VT62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++)
        {
            var idCol = sortVT[i];
            columns.push({ id: `quantity_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else if (rawData[0].CODE.startsWith("N62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++)
        {
            var idCol = sortMN[i];
            columns.push({ id: `quantity_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else if (rawData[0].CODE.startsWith("CQ62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = sortCQ[i];
            columns.push({ id: `quantity_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = rawData[0].lstCenter[i].hasOwnProperty("SAN_BAY_CODE") ? rawData[0].lstCenter[i].SAN_BAY_CODE : rawData[0].lstCenter[i]._implementation.SAN_BAY_CODE;
            columns.push({ id: `quantity_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        };


    }



    columns.push(
        { id: "sumQuantity", header: ["", "", { text: "CỘNG", align: "center" }], width: 150, type: "number", format: "#.#",},
        { id: "price", header: ["", { text: "ĐƠN GIÁ", align: "center", rowspan: 2 }], width: 150, type: "number", format: "#.#",},
    );

    columns.push(
        {
            id: `total_${idCol0}`, header: [
                "",
                { text: "THÀNH TIỀN", colspan: rawData[0].lstCenter.length + 1, align: 'center' },
                { text: idCol0, align: 'center' }
            ], align: 'right', width: 150, type: "number", format: "#.#",
        },
    );
    if (rawData[0].CODE.startsWith("B62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = sortquantity[i]
            columns.push({ id: `total_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        };
    }
    else if (rawData[0].CODE.startsWith("T62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = sortMT[i];
            columns.push({ id: `total_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else if (rawData[0].CODE.startsWith("VT62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++)
        {
            var idCol = sortVT[i];
            columns.push({ id: `total_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else if (rawData[0].CODE.startsWith("N62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++)
        {
            var idCol = sortMN[i];
            columns.push({ id: `total_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else if (rawData[0].CODE.startsWith("CQ62")) {
        for (var i = 1; i < rawData[0].lstCenter.length; i++)
        {
            var idCol = sortCQ[i];
            columns.push({ id: `total_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        }

    }
    else {
        for (var i = 1; i < rawData[0].lstCenter.length; i++) {
            var idCol = rawData[0].lstCenter[i].hasOwnProperty("SAN_BAY_CODE") ? rawData[0].lstCenter[i].SAN_BAY_CODE : rawData[0].lstCenter[i]._implementation.SAN_BAY_CODE;
            columns.push({ id: `total_${idCol}`, header: ["", "", { text: idCol, align: "center" }], align: "right", width: 150, type: "number", format: "#.#", });
        };
    }


    columns.push(
        { id: "sumTotal", header: ["","", { text: "CỘNG", align: "center" }], width: 150, type: "number", format: "#.#", footer: [{ content: "sum" }] },
        { id: "notes", header: [{ text: "GHI CHÚ", align: "center", rowspan: 3 }], width: 150 }
    );

    var jsonData = [];

    var ParentKhoanMucCode = rawData.filter(x => x.PARENT_CODE == "VT6273" || x.PARENT_CODE == "B6273" || x.PARENT_CODE == "CQ6273" || x.PARENT_CODE == "N6273" || x.PARENT_CODE == "T6273")

    var ListCodeParentKhoanMucB = []
    var ListCodeKhoanMucB = []
    for (var i = 0; i < ParentKhoanMucCode.length; i++) {
        ListCodeParentKhoanMucB.push(ParentKhoanMucCode[i].CODE)
    }

    var filterlstB = rawData.filter(x => ListCodeParentKhoanMucB.includes(x.PARENT_CODE)).filter(x => x.CODE.slice(-1) == "B")

    for (var i = 0; i < filterlstB.length; i++) {
        ListCodeKhoanMucB.push(filterlstB[i].CODE)
    }


    rawData.forEach((item) => {
        var obj = {
            id: item.CODE,
            code: item.CODE,
            parent: item.PARENT_CODE,
            name: item.NAME,
            isBold: item.IS_GROUP,
            notes: item.DESCRIPTION,
            isChecked: item.IsChecked,
            price: item.valueSb[0][1],
        }
        var sumQuantity = 0;
        var sumTotal = 0;

        if (ListCodeKhoanMucB.includes(item.CODE))
        {
            var codechild = rawData.filter(x => x.PARENT_CODE == item.CODE).map(x => x.CODE)
            let childB = []

            //loc ca phan tu con cua muc b
            for (let i = 0; i < codechild.length; i++) {

                var lstKmc = rawData.filter(x => x.PARENT_CODE == codechild[i]).map(x => x.CODE)

                if (lstKmc.length > 0) {

                    for (let j = 0; j < lstKmc.length; j++) {

                        var checkparent = rawData.filter(x => x.PARENT_CODE == lstKmc[j]).map(x => x.CODE)
                        if (checkparent.length > 0) {
                            childB = childB.concat(rawData.filter(x => x.PARENT_CODE == lstKmc[j]))
                        } else {
                            childB = childB.concat(rawData.filter(x => x.CODE == lstKmc[j]))
                        }
                    }
                } else {

                    childB = childB.concat(rawData.filter(x => x.CODE == codechild[i]))
                }
            }


            var sumchild = 0;
            for (var i = 0; i < item.lstCenter.length; i++) {
                if (item.lstCenter[i].hasOwnProperty("SAN_BAY_CODE")) {

                    obj[`quantity_${item.lstCenter[i].SAN_BAY_CODE}`] = item.valueSb[i][0];
                    var sum = childB.map(x => x.valueSb[0][1] > 10000000 ? x.valueSb[i][2] / 2 : x.valueSb[i][2]).reduce((a, b) => {return a+b},0)

                    obj[`total_${item.lstCenter[i].SAN_BAY_CODE}`] = sum;

                } else {
                    var sum = childB.map(x => x.valueSb[0][1] > 10000000 ? x.valueSb[i][2] / 2 : x.valueSb[i][2]).reduce((a, b) => { return a + b }, 0)

                    obj[`quantity_${item.lstCenter[i]._implementation.SAN_BAY_CODE}`] = item.valueSb[i][0];
                    obj[`total_${item.lstCenter[i]._implementation.SAN_BAY_CODE}`] = sum;
                }

                sumQuantity += item.valueSb[i][0];
                sumTotal += sum;

            }
            obj[`sumQuantity`] = sumQuantity;
            obj[`sumTotal`] = sumTotal;

        } else
        {
            for (var i = 0; i < item.lstCenter.length; i++) {
                if (item.lstCenter[i].hasOwnProperty("SAN_BAY_CODE")) {
                    obj[`quantity_${item.lstCenter[i].SAN_BAY_CODE}`] = item.valueSb[i][0];
                    obj[`total_${item.lstCenter[i].SAN_BAY_CODE}`] = item.valueSb[i][2];
                } else {

                    obj[`quantity_${item.lstCenter[i]._implementation.SAN_BAY_CODE}`] = item.valueSb[i][0];
                    obj[`total_${item.lstCenter[i]._implementation.SAN_BAY_CODE}`] = item.valueSb[i][2];
                }

                sumQuantity += item.valueSb[i][0];
                sumTotal += item.valueSb[i][2];
            }
            obj[`sumQuantity`] = sumQuantity;
            obj[`sumTotal`] = sumTotal;
        }


        jsonData.push(obj);
    });

    jsonData.forEach((item) => {
        if (item.parent == 'CQCT' || item.parent == 'DVT' || item.parent == 'CPMB' || item.parent == 'CPMT' || item.parent == 'CPMN') delete item.parent
    });
    const totalKeys = [];
Object.keys(jsonData[0]).forEach(key => {
            if (key.startsWith('total_')) {
                totalKeys.push(key);
            }});

    // tổng con của dụng cụ công cụ
    jsonData.forEach(x => {
        if (ListCodeParentKhoanMucB.includes(x.code)) {
            for (let i = 0; i < totalKeys.length; i++) {
                let total = 0;
                var sum = jsonData.filter(y => x.code == y.parent).map(e => e[totalKeys[i]]).reduce((a,b)=>a+b,0)
                x[totalKeys[i]]=sum
            }
            var sumtotal = jsonData.filter(y => x.code == y.parent).map(e => e['sumTotal']).reduce((a, b) => a + b, 0)
            x['sumTotal'] = sumtotal
        }
        }
    )
    jsonData.forEach(x => {
        if (x.code.endsWith("6273")) {
            for (let i = 0; i < totalKeys.length; i++) {
                let total = 0;
                var sum = jsonData.filter(y => x.code == y.parent).map(e => e[totalKeys[i]]).reduce((a, b) => a + b, 0)
                x[totalKeys[i]] = sum

            }
            var sumtotal = jsonData.filter(y => x.code == y.parent).map(e => e['sumTotal']).reduce((a, b) => a + b, 0)
            x['sumTotal'] = sumtotal
        }
    })
    jsonData.unshift({ name: `${CN}-${Sap}`, isChecked: false, title: true, isBold: true })
    const treeGrid = new dhx.TreeGrid("@gridId", {
        columns,
        leftSplit: 1,
        resizable: true,
        rowCss: function ({ isBold, isChecked }) {
            var css = "";
            if (isBold == true) {
                css += "row-bold";
            }
            if (isChecked == true) {
                css += "highlight-cell";
            }
            return css;
        },
        data: jsonData,
        rowHeight: 30
    });

    treeGrid.collapseAll();

    treeGrid.events.on("cellClick", function (row, column) {
        if (row.isBold && dataCenterModel.PHIEN_BAN != "PB4") return;
        if (column.id.includes("price") || column.id.includes("quantity_")) treeGrid.editCell(row.id, column.id);
    });

    treeGrid.events.on("afterEditEnd", function (value, row, column) {

        if (column.id.includes("price")) {
            onEditCell('DG', '', '', row.code, value)
        } else {
            var centerCode = '';
            rawData.forEach((item) => {
                for (var i = 0; i < item.lstCenter.length; i++) {
                    if (item.lstCenter[i].hasOwnProperty("SAN_BAY_CODE")) {
                        if (item.lstCenter[i].SAN_BAY_CODE == column.id.replace("quantity_","") && item.CODE == row.code) {
                            centerCode = item.lstCenter[i].COST_CENTER_CODE;
                        }
                    }
                    else {
                        if (item.lstCenter[i]._implementation.SAN_BAY_CODE == column.id.replace("quantity_","") && item.CODE == row.code) {
                            centerCode = item.lstCenter[i]._implementation.COST_CENTER_CODE;
                        }
                    }
                }
            });
            onEditCell('SL', column.id.replace("quantity_", ""), centerCode, row.code, value)
        }
    });

    var lstCol = columns.filter(x => x.id.includes("quantity_") || x.id.includes("total_"))

    function ShowAllColumns() {
        lstCol.forEach((item) => {
            treeGrid.showColumn(item.id);
        })
    }
    function HideDetailColumns() {
        lstCol.forEach((item) => {
            treeGrid.hideColumn(item.id);
        })
    } HideDetailColumns();
</script>









