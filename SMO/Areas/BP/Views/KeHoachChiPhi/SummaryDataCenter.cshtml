@model IList<T_MD_KHOAN_MUC_HANG_HOA>
@using SMO.Core.Entities;
@using SMO.Core.Entities.MD;
@using SMO.Service.Class;
@using System.Text;
@using Newtonsoft.Json.Serialization;
@using Newtonsoft.Json;
@{
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var dataCenterModel = ViewBag.dataCenterModel as ViewDataCenterModel;
    var lstDepartment = SelectListUtilities.GetAllCostCenter().ToList();
    var orgCode = dataCenterModel.ORG_CODE;
    var tempalteCode = dataCenterModel.TEMPLATE_CODE;
    var year = dataCenterModel.YEAR;
    var version = dataCenterModel.VERSION;
}

<style>
    .icon-function {
        cursor: pointer;
    }

    .table-screen {
        height: calc(100vh - 162px);
        margin-bottom: 0
    }

    .full-screen-table {
        height: calc(100vh -100px) !important;
    }

    .input-edit {
        background: none;
        border: none;
        text-align: right;
        width: 86px;
    }

    th {
        text-align: center;
    }
</style>
<a class="btn btn-default" style=" padding: 8px 6px 2px 4px; display: flex; justify-content: end; width: 100px;" href="@Url.Action("DownloadData", new {modelJson = JsonConvert.SerializeObject(dataCenterModel)})" target="_blank">
    <span class="material-icons col-fecon">file_download</span> Xuất Excel
</a>
<div class="export-left-tab">
    <div role="tabpanel" class="tab-pane fade in active">
        <div class="sticky-table sticky-headers sticky-ltr-cells table-screen table">
            <table class="table-condensed table-bordered table-striped font-13 table-zoom" id="table_month">
                <thead>
                    <tr>
                        <th rowspan="3" colspan="4">HÀNH ĐỘNG</th>
                        <th rowspan="3">MÃ</th>
                        <th rowspan="3">CHỈ TIÊU</th>
                        <th colspan="@(Model.GroupBy(x => x.Center.SAN_BAY_CODE).Count() * 2 + 3)">KẾ HOẠCH CHI TIẾT</th>
                    </tr>
                    <tr>
                        <th colspan="@(Model.GroupBy(x => x.Center.SAN_BAY_CODE).Count())">SỐ LƯỢNG</th>
                        <th rowspan="2">CỘNG</th>
                        <th rowspan="2">ĐƠN GIÁ</th>
                        <th colspan="@(Model.GroupBy(x => x.Center.SAN_BAY_CODE).Count())">THÀNH TIỀN</th>
                        <th rowspan="2">CỘNG</th>
                    </tr>
                    <tr>
                        @foreach (var sb in Model.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                        {
                            <th>@sb.Center.SAN_BAY_CODE</th>
                        }
                        @foreach (var sb in Model.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                        {
                            <th>@sb.Center.SAN_BAY_CODE</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderBy(x => x.CODE).GroupBy(x => x.CODE).Skip(0).Take(10).Select(x => x.First()))
                    {
                        var space = new StringBuilder();
                        for (int i = 0; i < item.LEVEL; i++)
                        {
                            space.Append("\t");
                        }
                        var classParent = item.IS_GROUP ? "strong" : string.Empty;
                        var isEdit = item.IS_GROUP ? "disabled" : "";
                        var isChecked = item.IsChecked ? "checked" : "";
                        var color = item.IsHighLight ? "red" : "";
                        <tr class="@classParent" style="color:@color">
                            <td>
                                <input type="checkbox" @isChecked class="filled-in chkItem" name="chkItem" id="@("chkItem" + item.CODE)" modelId="@item.CODE" style="margin:0;" onchange="IsDoneExpertise($(this).is(':checked'), $(this).attr('modelId'))" />
                                <label for="@("chkItem" + item.CODE)"></label>
                            </td>
                            <td><i class="material-icons icon-function" onclick="getCommentElement('@item.CODE')">comment</i></td>
                            <td><i class="material-icons icon-function" onclick="getAssignDepartmentElement('@item.CODE')">group_add</i></td>

                            @if (!string.IsNullOrEmpty(item.CODE) && item.IS_GROUP == false)
                            {
                                <td><i class="material-icons icon-function" onclick="getHistoryEditElement('@item.CODE')">history</i></td>
                            }
                            else
                            {
                                <td></td>
                            }

                            <td class="@classParent"><div class="@classParent">@(item.CODE)</div></td>
                            <td class="@classParent"><div class="@classParent">@($"{space.ToString()}{item.NAME}")</div></td>

                            @*Số lượng*@
                            @foreach (var sb in Model.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                            {
                                var value = Model.FirstOrDefault(x => x.Center.SAN_BAY_CODE == sb.Center.SAN_BAY_CODE && x.CODE == item.CODE)?.Values[0].ToStringVN();
                                <td class="align-right"><input type="text" class="input-edit" onchange="onEditCell('SL', '@sb.Center.SAN_BAY_CODE','@sb.Center.COST_CENTER_CODE', '@item.CODE', this.value)" value="@(value == "0" ? "" : value)" @isEdit /></td>
                            }

                            <td class="align-right">@(Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[0]).ToStringVN() == "0" ? "" : Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[0]).ToStringVN())</td>

                            @*Đơn giá*@
                            <td class="align-right"><input type="text" class="input-edit" @isEdit onchange="onEditCell('DG', '','', '@item.CODE', this.value)" value="@(Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[1].ToStringVN() == "0" ? "" : Model.FirstOrDefault(x => x.CENTER_CODE == item.CENTER_CODE && x.CODE == item.CODE)?.Values[1].ToStringVN())" /></td>

                            @foreach (var sb in Model.GroupBy(x => x.Center.SAN_BAY_CODE).Select(x => x.First()))
                            {
                                <td class="align-right">@(Model.FirstOrDefault(x => x.Center.SAN_BAY_CODE == sb.Center.SAN_BAY_CODE && x.CODE == item.CODE)?.Values[2].ToStringVN())</td>
                            }

                            <td class="align-right">@(Model.Where(x => x.CODE == item.CODE).Sum(x => x.Values[2]).ToStringVN())</td>
                        </tr>

                    }

                </tbody>
            </table>
        </div>
    </div>
</div>
<script>
    function onEditCell(type, sanBay, costCenter, elementCode, value) {
        if (value == null || value == "") {
            return;
        }
        var templateCode = $("#TEMPLATE_CODE").val();
        var version = $("#VERSION").val();
        var year = $("#YEAR").val();
        var ajaxParams = {
            url: 'BP/KeHoachChiPhi/UpdateCellValue',
            type: "POST",
            data: {
                templateCode: templateCode,
                version: version,
                year: year,
                type: type,
                sanBay: sanBay,
                costCenter: costCenter,
                elementCode: elementCode,
                value: value
            },
            dataType: 'json',
            success: function (response) {
                Message.execute(response);
            }
        };
        Forms.Ajax(ajaxParams);
    }

    function getHistoryEditElement(elementCode) {
        var templateCode = $("#TEMPLATE_CODE").val();
        var version = $("#VERSION").val();
        var year = $("#YEAR").val();
        var ajaxParams = {
            url: 'BP/KeHoachChiPhi/GetHistoryEditElement',
            type: "POST",
            data: {
                templateCode: templateCode,
                version: version,
                year: year,
                elementCode: elementCode,
            },
        };
        Forms.LoadAjaxModalLarge(ajaxParams);
    }

    function getCommentElement(elementCode) {
        var templateCode = $("#TEMPLATE_CODE").val();
        var version = $("#VERSION").val();
        var year = $("#YEAR").val();
        var ajaxParams = {
            url: 'BP/KeHoachChiPhi/GetCommentElement',
            type: "POST",
            data: {
                templateCode: templateCode,
                version: version,
                year: year,
                elementCode: elementCode,
            },
        };
        Forms.LoadAjaxModal(ajaxParams);
    }

    function getAssignDepartmentElement(elementCode) {
        var templateCode = $("#TEMPLATE_CODE").val();
        var version = $("#VERSION").val();
        var year = $("#YEAR").val();
        var ajaxParams = {
            url: 'BP/KeHoachChiPhi/GetAssignDepartmentElement',
            type: "POST",
            data: {
                templateCode: templateCode,
                version: version,
                year: year,
                elementCode: elementCode,
            },
        };
        Forms.LoadAjaxModal(ajaxParams);
    }

    function IsDoneExpertise(isCheck, element) {
       
        var originalCheckboxState = $('#chkItem' + element).prop('checked');
        console.log(originalCheckboxState)
        if (!isCheck) {
            Swal.fire({
                title: "Lưu ý?",
                text: "Hạng mục này đã được thẩm định! Hành động này sẽ không được lưu lại!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Đồng ý",
                cancelButtonText: "Huỷ"
            }).then((result) => {
                if (result.isConfirmed) {
                    var ajaxParams = {
                        url: 'BP/KeHoachChiPhi/UnExpertise',
                        type: 'POST',
                        data: {
                            templateCode: '@tempalteCode',
                            version: '@version',
                            year: '@year',
                            elementCode: element,
                        },
                        dataType: 'json',
                        success: function (response) {
                            Message.execute(response)
                        }
                    };
                    Forms.Ajax(ajaxParams);
                }
                else {
                    $('#chkItem' + element).prop('checked', !originalCheckboxState);
                }
            });
            return;
        } else {
            Swal.fire({
                title: "Lưu ý?",
                text: "Bạn có chắc hoàn thành thẩm định chỉ tiêu này?",
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Đồng ý",
                cancelButtonText: "Huỷ"
            }).then((result) => {
                if (result.isConfirmed) {
                    var ajaxParams = {
                        url: 'BP/KeHoachChiPhi/Expertise',
                        type: 'POST',
                        data: {
                            templateCode: '@tempalteCode',
                            version: '@version',
                            year: '@year',
                            elementCode: element,
                        },
                        dataType: 'json',
                        success: function (response) {
                            Message.execute(response)
                        }
                    };
                    Forms.Ajax(ajaxParams);
                }
                else {
                    $('#chkItem' + element).prop('checked', !originalCheckboxState);
                }
            });
        }
    }
</script>