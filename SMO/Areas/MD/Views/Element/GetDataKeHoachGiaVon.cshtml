@model SMO.Models.DataCenterModel
@using SMO.Models;
@using System.Text;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Serialization;

@{
    var lstSharedData = ViewBag.LstSharedData as List<SMO.Core.Entities.T_MD_SHARED_DATA>;
    var gridId = Guid.NewGuid().ToString("N");
    var gridId2 = Guid.NewGuid().ToString("N");
    var gridId3 = Guid.NewGuid().ToString("N");
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var jsonDataTab1 = Model.KeHoachGiaThanhData.OrderBy(x => x.AreaCode).ThenBy(x => x.Warehouse).Where(item => !(item.S0001 == 0 && item.S0002 == 0 && item.U0001 == 0 && item.S0003 == 0 && item.S0004 == 0
       && item.U0002 == 0 && item.S0005 == 0 && item.U0003 == 0 && item.S0006 == 0 && item.S0007 == 0
       && item.U0004 == 0 && item.U0005 == 0 && item.U0006 == 0 && item.U0007 == 0 && item.U0008 == 0 && item.S0008 == 0
       && item.U0009 == 0 && item.U0010 == 0)).Select(x => new
       {
           AreaCode = x.AreaCode,
           Warehouse = x.Warehouse,
           Delivery = x.DeliveryConditions,
           S0001 = x.S0001.ToStringVN(),
           S0002 = x.S0002.ToStringVN(),
           U0001 = x.U0001.ToStringVN(),
           S0003 = x.S0003.ToStringVN(),
           S0004 = x.S0004.ToStringVN(),
           U0002 = x.U0002.ToStringVN(),
           S0005 = x.S0005.ToStringVN(),
           U0003 = x.U0003.ToStringVN(),
           S0006 = x.S0006.ToStringVN(),
           s0008 = (x.S0008 * 100).ToString("0.##") + "%", // Chỉ giữ lại property này
           ThueSuat = x.ThueSuat.ToStringVN(),
           S0007 = x.S0007.ToStringVN(),
           U0004 = x.U0004.ToStringVN(),
           U0005 = x.U0005.ToStringVN(),
           U0006 = x.U0006.ToStringVN(),
           U0007 = x.U0007.ToStringVN(),
           U0008 = x.U0008.ToStringVN(),
           U0009 = x.U0009.ToStringVN(),
           U0010 = x.U0010.ToStringVN(),
       });

    var jsonDataTab2 = Model.KeHoachGiaVonData.OrderBy(x => x.Order).Select(x => new
    {
        Id = x.Order.ToString(),
        Parent = x.Parent,
        Name = x.Name,
        Value1 = x.Value1 == 0 ? "" : x.Value1.ToStringVN(),
        Value2 = x.Value2 == 0 ? "" : x.Value2.ToStringVN(),
        Value3 = x.Value3 == 0 ? "" : x.Value3.ToStringVN(),
        Value4 = x.Value4 == 0 ? "" : x.Value4.ToStringVN(),
        Value5 = x.Value5 == 0 ? "" : x.Value5.ToStringVN(),
        Value6 = x.Value6 == 0 ? "" : Math.Round(x.Value6).ToStringVN(),
        Value7 = x.Value7 == 0 ? "" : x.Value7.ToStringVN(),
        Value8 = x.Value8 == 0 ? "" : x.Value8.ToStringVN(),
        Value9 = x.Value9 == 0 ? "" : x.Value9.ToStringVN(),
        Value10 = x.Value10 == 0 ? "" : x.Value10.ToStringVN(),
        Value11 = x.Value11 == 0 ? "" : x.Value11.ToStringVN(),
        Value12 = x.Value12 == 0 ? "" : Math.Round(x.Value12).ToStringVN(),
        Value13 = x.Value13 == 0 ? "" : Math.Round(x.Value13).ToStringVN(),
        Value14 = x.Value14 == 0 ? "" : Math.Round(x.Value14).ToStringVN(),
        Value15 = x.Value15 == 0 ? "" : Math.Round(x.Value15).ToStringVN(),
        Value16 = x.Value16 == 0 ? "" : Math.Round(x.Value16).ToStringVN(),
        Value17 = x.Value17 == 0 ? "" : Math.Round(x.Value17).ToStringVN(),
        Value18 = x.Value18 == 0 ? "" : Math.Round(x.Value18).ToStringVN(),
        Value19 = x.Value19 == 0 ? "" : Math.Round(x.Value19).ToStringVN(),
        Value20 = x.Value20 == 0 ? "" : Math.Round(x.Value20).ToStringVN(),
    });

    var jsonDataTab3 = Model.KeHoachGiaVonTheoThang.OrderBy(x => x.Order).Select(x => new
    {
        Id = x.Order.ToString(),
        Parent = x.Parent,
        Name = x.Name,
        dvt = x.DVT,

        ValueDG = x.ValueDG == 0 ? "" : x.ValueDG.ToString("F2"),
        Tg = x.ValueDG == 0 ? "" : x.TG.ToStringVN(),
        Value1 = Math.Round(x.Value1).ToStringVN(),
        Value2 = Math.Round(x.Value2).ToStringVN(),
        Value3 = Math.Round(x.Value3).ToStringVN(),
        Value4 = Math.Round(x.Value4).ToStringVN(),
        Value5 = Math.Round(x.Value5).ToStringVN(),
        Value6 = Math.Round(x.Value6).ToStringVN(),
        Value7 = Math.Round(x.Value7).ToStringVN(),
        Value8 = Math.Round(x.Value8).ToStringVN(),
        Value9 = Math.Round(x.Value9).ToStringVN(),
        Value10 = Math.Round(x.Value10).ToStringVN(),
        Value11 = Math.Round(x.Value11).ToStringVN(),
        Value12 = Math.Round(x.Value12).ToStringVN(),
        Value13 = Math.Round(x.SumGV).ToStringVN(),
        DesMonth = x.desMonth,
        DesTotal = x.destotal,
        DesDg = x.desDG,
    }); ;
    var Valuecondition = Model.KeHoachGiaThanhData.Where(x => x.DeliveryConditionsCode != "TN").Sum(x => x.S0002);


    var pre_bh = Valuecondition == 0 ? 0 : Model.KeHoachGiaThanhData.Sum(x => x.S0002 * Math.Round(x.U0008, 3)) / Model.KeHoachGiaThanhData.Where(x => x.DeliveryConditionsCode != "TN").Sum(x => x.S0002);
}

<style>
    .liNav {
        width: 150px;
        position: absolute;
        right: 0;
    }

    .dhx_slider {
        padding: 0;
    }

    .bootstrap-select.form-control {
        position: relative;
        z-index: 1000;
    }

    .custom-tooltip {
        width: 300px;
    }
</style>
<div class="export_data">
    <div role="presentation" class="liNav" style="cursor: pointer">
        <div style="display:flex; align-items:center;">
            <div id="slider" style="width:100%;"></div>
            <span class="waves-effect btn-default btn" onclick="$('.load_data').toggleClass('full-screen');$('.table').toggleClass('full-screen-table');$('.table').toggleClass('table-screen');" title="Xem toàn màn hình">
                <i class="material-icons" style="color: #0d6efd">fullscreen</i>
            </span>
        </div>
    </div>
    <ul class="nav nav-tabs " role="tablist" style="width: 100%; display: flex; position: relative;">
        <li role="presentation" class="active">
            <a href="#tab-1" data-toggle="tab">KH Nhập nhiên liệu</a>
        </li>
        @if (AuthorizeUtilities.CheckUserRight("R5.8.1") || AuthorizeUtilities.CheckUserRight("R"))
        {
            <li role="presentation">
                <a href="#tab-2" data-toggle="tab">KH giá vốn</a>
            </li>
        }
        <li role="presentation">
            <a href="#tab-3" data-toggle="tab">KH giá vốn theo tháng</a>
        </li>
    </ul>

    <div class="tab-content" style="padding-bottom:0">
        <div role="tabpanel" class="tab-pane fade in active" id="tab-1">
            <div style="padding: 0px 0px 0px 12px;">- Thuế suất thuế nhập khẩu bình quân: <strong>@((lstSharedData.FirstOrDefault(x => x.CODE == "TNK-VN").VALUE * 100).ToString("0.000")) % </strong></div>
            <div style="padding: 0px 0px 6px 12px;">- Pre+BH bình quân: <strong>@pre_bh.ToString("0.000")</strong></div>
            <div style="height: calc(100vh - 262px); width: 100%" id="@gridId"></div>
        </div>
        <div role="tabpanel" class="tab-pane fade in" id="tab-2">
            <div style="height: calc(100vh - 262px); width: 100%" id="@gridId2"></div>

        </div>

        <div role="tabpanel" class="tab-pane fade in" id="tab-3">
            <div style="height: calc(100vh - 262px); width: 100%" id="@gridId3"></div>

        </div>

    </div>

</div>

<script>
    $(function () {
        Forms.CompleteUI();
        ActiveTab();
    });
    const rawData = @Html.Raw(JsonConvert.SerializeObject(jsonDataTab1, jsonSerializeSettings));
    const rawDataTab2 = @Html.Raw(JsonConvert.SerializeObject(jsonDataTab2, jsonSerializeSettings));
    const rawDataTab3 = @Html.Raw(JsonConvert.SerializeObject(jsonDataTab3, jsonSerializeSettings));
    let columns = [
        { id: "warehouse", header: [{ text: "KHO ĐN", align: "center", rowspan: 2 }], minWidth: 120 },
        { id: "areaCode", header: [{ text: "KHU VỰC", align: "center", rowspan: 2 }], minWidth: 120 },
        { id: "delivery", header: [{ text: "ĐK GIAO HÀNG", align: "center", rowspan: 2 }], minWidth: 140 },
        {
            id: "s0001", header: [{ text: "TỶ LỆ NHẬP", align: "center", colspan: 2 }, { text: "TỶ LỆ NHẬP THEO KHO", align: "center" }], align: "right", minWidth: 160, template: (value, r, c) => {
                return `<div>${value}% </div>`
            }, htmlEnable: true
        },
        { id: "s0002", header: [{ text: "", align: "center" }, { text: "SL NHẬP THEO KHO", align: "center" }], align: "right", minWidth: 160 },
        { id: "u0001", header: [{ text: "PLATT'S ($/THÙNG)", align: "center", rowspan: 2 }, { text: "", align: "center" }], align: "right", minWidth: 136 },
        { id: "s0003", header: [{ text: "PREMIUM", align: "center", colspan: 2 }, { text: "HÀNG (THÙNG)", align: "center" }], align: "right", minWidth: 124 },
        { id: "s0004", header: [{ text: "", align: "center" }, { text: "TÀU", align: "center" }], align: "right", minWidth: 120 },
        { id: "u0002", header: [{ text: "CFR ($/THÙNG)", align: "center", rowspan: 2 }, { text: "", align: "center" }], align: "right", minWidth: 140 },
        { id: "s0005", header: [{ text: "THÙNG/TẤN", align: "center", rowspan: 2 }, { text: "", align: "center" }], align: "right", minWidth: 120 },
        { id: "u0003", header: [{ text: "GIÁ CFR ($/TẤN)", align: "center", rowspan: 2 }, { text: "", align: "center" }], align: "right", minWidth: 140 },
        { id: "s0006", header: [{ text: "BẢO HIỂM ($/TẤN)", align: "center", rowspan: 2 }, { text: "", align: "center" }], align: "right", minWidth: 140 },
        { id: "s0008", header: [{ text: "THUẾ NK", align: "center", colspan: 2 }, { text: "THUẾ SUẤT", align: "center" }], align: "right", minWidth: 120, htmlEnable: true, template: function(text) { return text; } },
        { id: "thueSuat", header: [{ text: "", align: "center"}, { text: "THUẾ ($/TẤN)", align: "center" }], align: "right", minWidth: 120 },
        {
            id: "s0007", header: [{ text: "THUẾ ƯU ĐÃI", align: "center", colspan: 2 }, { text: "THUẾ SUẤT", align: "center" }], align: "right", minWidth: 120, template: (value, r, c) => {
                return `<div>${value}% </div>`
            }, htmlEnable: true },
        { id: "u0004", header: [{ text: "", align: "center" }, { text: "THUẾ ($/TẤN)", align: "center" }], align: "right", minWidth: 120 },
        { id: "u0005", header: [{ text: "CIF + TẤN ($/TẤN)", align: "center", rowspan: 2 }, { text: "", align: "center" }], align: "right", minWidth: 140 },
        { id: "u0006", header: [{ text: "CIF + TẤN ($/TẤN) BQ", align: "center", rowspan: 2 }], align: "right", minWidth: 140 },
        { id: "u0007", header: [{ text: "CIF + TẤN ($/TẤN) BQ", align: "center", rowspan: 2 }], align: "right", minWidth: 140 },
        { id: "u0008", header: [{ text: "PRE + BH ($/THÙNG)", align: "center", rowspan: 2 }], align: "right", minWidth: 140 },
        { id: "u0009", header: [{ text: "", align: "center", rowspan: 2 }], align: "right", minWidth: 60 },
        { id: "u0010", header: [{ text: "GIẢM TRỪ THUẾ HÀNG DUNG QUẤT + FORM D", align: "center", rowspan: 2 }], align: "right", minWidth: 180 },
    ];

    let columnsTab2 = [
        { id: "name", header: [{ text: "KHÁCH HÀNG", align: "center", rowspan: 3 }], minWidth: 220 },
        { id: "value1", header: [{ text: "SẢN LƯỢNG", align: "center", rowspan: 3 }], align: "right", minWidth: 120 },
        { id: "value2", header: [{ text: "CHI TIẾT GIÁ VỐN (USD/TẤN)", align: "center", colspan: 9 }, { text: "MOPS ($/TẤN)", align: "center", rowspan: 2 }], align: "right", minWidth: 120 },
        { id: "value3", header: [{ text: "", align: "center" }, { text: "PRE+BH ($/TẤN)", align: "center", rowspan: 2 }], align: "right", minWidth: 120 },
        { id: "value4", header: [{ text: "", align: "center" }, { text: "CIF ($/TẤN)", align: "center", rowspan: 2 }], align: "right", minWidth: 120 },
        { id: "value5", header: [{ text: "", align: "center" }, { text: "THUẾ ($/TẤN)", align: "center", rowspan: 2 }], align: "right", minWidth: 120 },
        { id: "value6", header: [{ text: "", align: "center" }, { text: "CP MUA HÀNG (Đ/TẤN)", align: "center", rowspan: 2 }], align: "right", minWidth: 140 },
        { id: "value7", header: [{ text: "", align: "center" }, { text: "HAO HỤT ($/TẤN)", align: "center", colspan: 3 }, { text: "CỘNG HH", align: "center" }], align: "right", minWidth: 110 },
        { id: "value8", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "CƯ", align: "center" }], align: "right", minWidth: 100 },
        { id: "value9", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "TN", align: "center" }], align: "right", minWidth: 100 },
        { id: "value10", header: [{ text: "", align: "center" }, { text: "PHÍ FHS", align: "center", rowspan: 2 }], align: "right", minWidth: 100 },
        { id: "value11", header: [{ text: "TỶ GIÁ", align: "center", rowspan: 3 }], align: "right", minWidth: 100 },
        { id: "value12", header: [{ text: "GIÁ VỐN", align: "center", colspan: 2 }, { text: "CỘNG Đ.GIÁ (Đ/TẤN)", align: "center", rowspan: 2 }], align: "right", minWidth: 140 },
        { id: "value13", header: [{ text: "", align: "center" }, { text: "TỔNG GIÁ VỐN (TRVNĐ)", align: "center", rowspan: 2 }], align: "right", minWidth: 160 },
        { id: "value14", header: [{ text: "THÀNH TIỀN (VNĐ)", align: "center", colspan: 7 }, { text: "MOPS", align: "center", rowspan: 2 }], align: "right", minWidth: 160 },
        { id: "value15", header: [{ text: "", align: "center" }, { text: "PREMIUM & BH", align: "center", rowspan: 2 }], align: "right", minWidth: 160 },
        { id: "value16", header: [{ text: "", align: "center" }, { text: "THUẾ NK", align: "center", rowspan: 2 }], align: "right", minWidth: 160 },
        { id: "value17", header: [{ text: "", align: "center" }, { text: "DV MUA NGOÀI", align: "center", rowspan: 2 }], align: "right", minWidth: 160 },
        { id: "value18", header: [{ text: "", align: "center" }, { text: "HAO HỤT", align: "center", colspan: 2 }, { text: "HH CƯ", align: "center" }], align: "right", minWidth: 160 },
        { id: "value19", header: [{ text: "", align: "center" }, { text: "", align: "center" }, { text: "HH TN", align: "center" }], align: "right", minWidth: 160 },
        { id: "value20", header: [{ text: "", align: "center" }, { text: "FHS", align: "center", rowspan: 2 }], align: "right", minWidth: 160 },
    ];

    let columnsTab3 = [
        { id: "name", header: [{ text: "KHÁCH HÀNG", align: "center", rowspan: 2 }], minWidth: 240 },
        { id: "dvt", header: [{ text: "ĐVT", align: "center", rowspan: 2 }], align: "center", minWidth: 100 },
        { id: "tg", header: [{ text: "Tỷ giá ", align: "center", rowspan: 2 }], align: "center", minWidth: 100 },
        {
            id: "valueDG", header: [{ text: "ĐƠN GIÁ", align: "center", rowspan: 2 }], align: "right", minWidth: 120,
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
              <span><br/>${row.desDg}</span>
                </div>`;
            }
},
        {
            id: "value1", header: [{ text: "CHI TIẾT GIÁ VỐN(USD/TẤN)", align: "center", colspan: 12 }, { text: "THÁNG 1", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value2", header: [{ text: "", align: "center" }, { text: "THÁNG 2", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value3", header: [{ text: "", align: "center" }, { text: "THÁNG 3", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value4", header: [{ text: "", align: "center" }, { text: "THÁNG 4", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value5", header: [{ text: "", align: "center" }, { text: "THÁNG 5", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value6", header: [{ text: "", align: "center" }, { text: "THÁNG 6", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                 </div>`;
            },

            align: "right", minWidth: 160
        },
        {
            id: "value7", header: [{ text: "", align: "center" }, { text: "THÁNG 7", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value8", header: [{ text: "", align: "center" }, { text: "THÁNG 8", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                 <span><br/>${row.desMonth}</span>
                 </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value9", header: [{ text: "", align: "center" }, { text: "THÁNG 9", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value10", header: [{ text: "", align: "center" }, { text: "THÁNG 10", align: "center" }],

            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value11", header: [{ text: "", align: "center" }, { text: "THÁNG 11", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                 </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value12", header: [{ text: "", align: "center" }, { text: "THÁNG 12", align: "center" }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desMonth}</span>
                </div>`;
            },
            align: "right", minWidth: 160
        },
        {
            id: "value13", header: [{ text: "CỘNG GIÁ VỐN", align: "center", rowspan: 2 }],
            htmlEnable: true,
            tooltipTemplate: function (value, row, column) {
                return `<div className="custom-tooltip">
                <span><br/>${row.desTotal}</span>
                </div>`;
            },
            align: "right", minWidth: 180
        },
    ];
    const widthMap = new Map(columns.map(({ minWidth, id }) => ([id, minWidth])));
    const widthMapTab2 = new Map(columnsTab2.map(({ minWidth, id }) => ([id, minWidth])));
    const widthMapTab3 = new Map(columnsTab3.map(({ minWidth, id }) => ([id, minWidth])));


    rawDataTab2.forEach((item) => {
        if (item.parent == null) {
            delete item.parent
        }
    });

    rawDataTab3.forEach((item) => {
        if (item.parent == null) {
            delete item.parent
        }
    });
    const treeGridTab1 = new dhx.Grid("@gridId", {
        columns,
        leftSplit: 3,
        resizable: true,
        keyNavigation: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
        data: rawData,
        rowHeight: 30,
        selection: 'row',
    });

    const treeGridTab2 = new dhx.TreeGrid("@gridId2", {
        columns: columnsTab2,
        leftSplit: 1,
        resizable: true,
        keyNavigation: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
        data: rawDataTab2,
        rowHeight: 30,
        selection: 'row',
    });

    const treeGridTab3 = new dhx.TreeGrid("@gridId3", {
        columns: columnsTab3,
        leftSplit: 3,
        resizable: true,
        keyNavigation: true,
        rowCss: function ({ isBold }) { return isBold == true ? "row-bold" : "" },
        data: rawDataTab3,
        selection: 'row',
        rowHeight: 30,
    });
    console.log(rawDataTab3)

    const MAIN_FONT_SIZE = 14;
    var FONT_SIZE_CHANGE = 14;
    const slider = new dhx.Slider("slider", {
        min: 4,
        max: 36,
        step: 1,
        value: MAIN_FONT_SIZE,
        tooltip: false
    });


    slider.events.on("change", value => {
        FONT_SIZE_CHANGE = parseInt(value);
        const fontSize = parseInt(value);
        document.documentElement.style.setProperty("--dhx-font-size-normal", fontSize + "px");

        columns = columns.map(column => {
            return {
                ...column,
                minWidth: widthMap.get(column.id) * (fontSize / MAIN_FONT_SIZE) - 2,
            };
        });

        columnsTab2 = columnsTab2.map(column => {
            return {
                ...column,
                minWidth: widthMapTab2.get(column.id) * (fontSize / MAIN_FONT_SIZE) - 2,
            };
        });




        $(".dhx_grid-cell").css("font-size", `${value}px`);
        $(".dhx_tree-cell").css("font-size", `${value}px`);
        $(".dhx_grid-header-cell").css("font-size", `${value}px`);
        treeGridTab1.setColumns(columns);
        treeGridTab2.setColumns(columnsTab2);
    });
</script>
