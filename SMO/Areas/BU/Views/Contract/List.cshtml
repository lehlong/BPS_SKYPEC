@model SMO.Service.BU.ContractService
@using Newtonsoft.Json.Serialization;
@using Newtonsoft.Json;
@using SMO.Repository.Implement.MD;
@{
    var gridId = Guid.NewGuid().ToString("N");
    var alertRed = Model.UnitOfWork.Repository<ContractAlertRepo>().Queryable().FirstOrDefault(x => x.CODE == "RED").NUMBER;
    var alertYellow = Model.UnitOfWork.Repository<ContractAlertRepo>().Queryable().FirstOrDefault(x => x.CODE == "YELLOW").NUMBER;
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var jsonData = Model.ObjList.Where(x => x.PARENT == null).Select((x, index) =>
    {
        bool haveChild = false;
        if (x.ChildContracts.Count() > 0)
        {
            haveChild = true;
        }
        return new
        {
            id = Guid.NewGuid(),
            isChild = haveChild,
            idContract = x.NAME_CONTRACT,
            stt = index + 1,
            nameContract = x.NAME,
            numberContract = x.CONTRACT_NUMBER,
            typeContract = x.ContractType.TEXT,
            nameCustomer = x.CustomerContract.TEXT,
            manager = x.ContractManager.FULL_NAME,
            department = x.CostCenter.NAME,
            valueOriginal = x.CONTRACT_VALUE.ToStringVN(),
            signDay = x.SIGN_DAY.ToString("dd/MM/yyyy"),
            startDate = x.START_DATE.ToString("dd/MM/yyyy"),
            finishDate = x.FINISH_DATE.ToString("dd/MM/yyyy"),
            statusCode = x.STATUS,
            status = SMO.Core.Entities.BU.ConstContract.convertStatusToString(x.STATUS),
            phase = SMO.Core.Entities.BU.ConstContract.convertPhaseToString(x.CONTRACT_PHASE),
            version = x.VERSION,
            progress = x.PHANTRAM,
            createContract = x.ID,
            file = x.FILE_CHILD,
            alert = (x.FINISH_DATE - DateTime.Now).Days + 1 <= alertYellow && (x.FINISH_DATE - DateTime.Now).Days + 1 > alertRed ? "warning" : (x.FINISH_DATE - DateTime.Now).Days + 1 <= alertRed ? "danger" : "normal",
            remainingDays = (x.FINISH_DATE - DateTime.Now).Days + 1
        };
    }).ToList();
    var lstStatus = SelectListUtilities.GetContractStatus().ToList();
    var lstPhase = SelectListUtilities.GetContractPhase().ToList();
}

<style>
    .table-container {
        width: 100%;
        overflow-x: auto;
    }
    .header-year {
        background-color: #FFFFFF !important;
    }

    td {
        overflow: hidden;
    }

    .resize-col {
        resize: horizontal;
        overflow: hidden;
        display: block;
    }

    .table-screen {
        height: calc(100vh - 212px);
        margin-bottom: 0
    }

    .full-screen-table {
        height: calc(100vh -100px) !important;
    }

    .sticky-col {
        position: sticky;
        left: 0;
        background-color: inherit;
    }
    .sticky-row {
        position: sticky;
        top: 0;
        background-color: #f8f9fa;
    }

    .padding-right{
        padding-right:20px;
    }

</style>

<div class="container-fluid">
    <div class="sticky-table sticky-headers sticky-ltr-cells table-screen table">
        <table id="@gridId" class="table-container table-condensed table-striped table-bordered table-striped font-13 table-zoomtable-condensed table-bordered table-striped font-13 table-zoom">
            <tbody>
                <tr class="strong" data-xls-row="header">
                    <th class="sticky-row sticky-col" style="z-index:11;"></th>
                    <th class="pre-whitespace sticky-row sticky-col" style="z-index:11;">STT</th>
                    <th class="pre-whitespace sticky-row sticky-col padding-right" style="z-index:11;">Tên hợp đồng</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Số hợp đồng</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Loại hợp đồng</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Ngày còn lại</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Tên khách hàng</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Quản lý hợp đồng</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Phòng ban</th>
                    <th class="pre-whitespace sticky-row ">Giá trị (chưa VAT)</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Ngày bắt đầu</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Ngày kết thúc</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Ngày ký kết</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Trạng thái</th>
                    <th class="pre-whitespace sticky-row " style="padding-right: 50px;">Giai đoạn</th>
                    <th class="pre-whitespace sticky-row ">Version</th>
                    <th class="pre-whitespace sticky-row ">Tiến độ thanh toán</th>
                    <th class="pre-whitespace sticky-row "></th>
                    <th class="pre-whitespace sticky-row ">File</th>
                </tr>
                <tr class="strong" data-xls-row="header">
                    <th class=" sticky-col" style="z-index:10; top:40px;"></th>
                    <th class="pre-whitespace sticky-col" style="z-index:10;"></th>
                    <th class="sticky-col" style="z-index:10;">
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.NAME, new { placeholder = "", @class = "align-center", @data_val = false,@data_column = 2, @oninput= "HandleSearch(this)" })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_NUMBER, new { placeholder = "", @class = "align-center", @data_val = false, @data_column = 3, @oninput = "HandleSearch(this)" })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_TYPE, new { placeholder = "", @class = "align-center", @data_val = false, @data_column = 4, @oninput = "HandleSearch(this)" })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_NUMBER, new { placeholder = "", @class = "align-center", @data_val = false, @data_column = 5, @oninput = "HandleSearch(this)" })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.CUSTOMER, new { placeholder = "", @class = "align-center", @data_val = false, @data_column = 6, @oninput = "HandleSearch(this)"  })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_MANAGER, new { placeholder = "", @class = "align-center", @data_val = false, @data_column = 7, @oninput = "HandleSearch(this)" })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="input-group page-function-search">
                            <div class="form-line">
                                @Html.MyTextBoxFor(m => m.ObjDetail.DEPARTMENT, new { placeholder = "", @class = "align-center", @data_val = false, @data_column = 8, @oninput = "HandleSearch(this)" })
                            </div>
                            <span class="input-group-addon" title="Tìm kiếm">
                                <i class="material-icons">search</i>
                            </span>
                        </div>
                    </th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th>
                        <div class="form-group">
                            @Html.MyDropDownListFor(m => m.ObjDetail.STATUS, SelectListUtilities.GetContractStatus(),
                            new { @data_live_search = "true", @class = "selectpicker form-control status", @data_val = false, @data_column=13, onchange = "HandlerSearchSelect(13, this)" })
                        </div>
                    </th>
                    <th>
                        <div class="form-group">
                            @Html.MyDropDownListFor(m => m.ObjDetail.CONTRACT_PHASE, SelectListUtilities.GetContractPhase(),
                            new { @data_live_search = "true", @class = "selectpicker form-control phase", @data_val = false, @data_column = 14, onchange = "HandlerSearchSelect(14, this)" })
                        </div>
                    </th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            
                <!-- Add your rows here -->
                @foreach (var item in jsonData)
                {


<tr>
    @if (item.isChild != true)
    {
        <td class="sticky-col"></td>
    }
    else
    {
        <td class="sticky-col" style="text-align:center"><i class="material-icons swap-icon-drill-down" data-action="open" data-row-id="@item.idContract" data-stt="@item.stt" data-id="@item.createContract" onclick="addDataToRows(this)">unfold_more</i></td>
    }
    <td class="pre-whitespace sticky-col">@item.stt</td>
    <td class="pre-whitespace sticky-col"><a class="" href="" onclick="DetailContract(event, '@item.idContract')">@item.nameContract</a></td>
    <td>@item.numberContract</td>
    <td>@item.typeContract</td>

    @if (item.alert == "warning")
    {
        <td><span class="badge bg-yellow">Còn @item.remainingDays ngày</span></td>
    }
    else if (item.alert == "danger")
    {
        <td><span class="badge bg-red">Còn @item.remainingDays ngày</span></td>
    }
    else if (item.alert == "normal")
    {
        <td><span class="badge">Còn @item.remainingDays ngày</span></td>
    }

    <td>@item.nameCustomer</td>
    <td>@item.manager</td>
    <td>@item.department</td>
    <td>@item.valueOriginal</td>
    <td>@item.startDate</td>
    <td>@item.finishDate</td>
    <td>@item.signDay</td>
    @if (item.statusCode == "01")
    {
        <td><span class="badge bg-blue-grey">@item.status</span></td>
    }
    else if (item.statusCode == "02")
    {
        <td><span class="badge bg-brown">@item.status</span></td>
    }
    else if (item.statusCode == "03")
    {
        <td><span class="badge bg-green">@item.status</span></td>
    }
    else if (item.statusCode == "04")
    {
        <td><span class="badge bg-black">@item.status</span></td>
    }
    <td>@item.phase</td>
    <td>@item.version</td>
    <td>
        <div class="progress-container">
            <div class="progress" style="width: @((item.progress > 100 ? 100 : item.progress) + "%"); background: @(item.progress >= 100 ? "green" : "#337ab7");">
                <div class="progress-text">@((item.progress > 100 ? 100 : item.progress) + "%")</div>
            </div>
        </div>
    </td>
    <td><a class="btn btn-default" style="margin: 2px;" href="" onclick="CreateChildContract(event, '@item.createContract')"><i class="col-fecon material-icons">add_circle</i> Tạo phụ lục HĐ</a></td>
    <td><i class="col-fecon material-icons" href="#" onclick="CallFIle('@item.file', '@item.version')">attach_file</i></td>
</tr>
                }

                <!-- Add more rows as needed -->
            </tbody>
        </table>
    </div>
</div>



<style>
    .myCustomClass {
        background-color: #EEEEEE;
    }

    .progress-container {
        width: 120px;
        height: 18px;
        background: #EEEEEE;
        display: flex;
    }

    .progress {
        height: 18px;
        text-align: center;
        display: flex;
        justify-content: center;
        border-radius: unset;
        align-items: center;
    }

    .progress-text {
        font-size: 12px;
        color: white;
    }

    .alert-danger-contract {
        color: #B22222;
    }

    .alert-warning-contract {
        color: #CDAD00;
    }

    
</style>
<script>
    const rawData = @Html.Raw(JsonConvert.SerializeObject(jsonData, jsonSerializeSettings));
        var ObjFilter = {
            ObjDetail: {
                NAME: "",
                CONTRACT_NUMBER: "",
                CONTRACT_TYPE: "",
                CUSTOMER: "",
                CONTRACT_MANAGER: "",
                DEPARTMENT: "",
                STATUS: "",
                CONTRACT_PHASE: "",
                START_DATE: "",
                FINISH_DATE:""
            },
            Page: 1,
            NumerRecordPerPage: 50
    }

    function addDataToRows(element) {
    var action = element.getAttribute("data-action");
    var rowId = element.getAttribute("data-row-id");
    var id = element.getAttribute("data-id");
    var stt = element.getAttribute("data-stt");
    var indexRowAction = Number.parseInt(stt);

        console.log(action);
    if (action == "open") {
        element.setAttribute("data-action", "close");

        var headers = {
            'RequestVerificationToken': $('#antiForgeryToken').val(),
        };

        $.ajax({
            url: "@Url.Action("showContractChild")",
            type: "GET",
            headers: headers,
            data: { id: id },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                var dataAdd = calculateSTT(data, indexRowAction);

                dataAdd = dataAdd.reverse();
                // Lặp qua dữ liệu và thêm vào bảng
                for (var i = 0; i < dataAdd.length; i++) {
                    var rowData = dataAdd[i];
                    console.log(rowData)
                    var newRow = document.createElement('tr');
                    newRow.classList.add(`${rowId}`);
                    var html = `
                        <td></td>
                        <td class="sticky-col">${rowData.stt}</td>
                        <td class="sticky-col"><a class="" href="" onclick="DetailContract(event, '${rowData.idContract}')">${rowData.nameContract}</a></td>
                        <td>${rowData.numberContract}</td>
                        <td>${rowData.typeContract}</td>
                         ${
                            rowData.alert == "warning" ? `<td><span class="badge bg-yellow">Còn ${rowData.remainingDays} ngày</span></td>`:
                            rowData.alert == "danger" ? `<td><span class="badge bg-red">Còn ${rowData.remainingDays} ngày</span></td>`:
                            rowData.alert == "normal" ? `<td><span class="badge">Còn ${rowData.remainingDays} ngày</span></td>` :
                            `<td></td>`
                        }
                        <td>${rowData.nameCustomer}</td>
                        <td>${rowData.manager}</td>
                        <td>${rowData.department}</td>
                        <td>${rowData.valueOriginal}</td>
                        <td>${rowData.startDate}</td>
                        <td>${rowData.finishDate}</td>
                        <td>${rowData.signDay}</td>
                        ${
                          rowData.statusCode === "01" ? `<td><span class="badge bg-blue-grey">${rowData.status}</span></td>` :
                          rowData.statusCode === "02" ? `<td><span class="badge bg-brown">${rowData.status}</span></td>` :
                          rowData.statusCode === "03" ? `<td><span class="badge bg-green">${rowData.status}</span></td>` :
                          rowData.statusCode === "04" ? `<td><span class="badge bg-black">${rowData.status}</span></td>` :
                          `<td></td>` // Trường hợp mặc định
                        }
                        <td>${rowData.phase}</td>
                        <td>${rowData.version}</td>
                        <td>
                            <div class="progress-container">
                                <div class="progress" style="width: ${(rowData.progress > 100 ? "100%" : rowData.progress + "%")}; background: ${rowData.progress >= 100 ? "green" : "#337ab7"};">
                                    <div class="progress-text">${(rowData.progress > 100 ? "100%" : rowData.progress) + "%"}</div>
                                </div>
                            </div>
                        </td>
                        <td></td>
                        <td><i class="col-fecon material-icons" href="#" onclick="CallFIle(${rowData.file}, ${rowData.version})">attach_file</i></td>
                    `
                    newRow.innerHTML = html;
                    var currentRow = element.closest('tr');
                    currentRow.parentNode.insertBefore(newRow, currentRow.nextSibling);
                }

                element.setAttribute("data-number", dataAdd.length);
            },
            error: function () {
                console.error("Error occurred.");
            }
        });
    } else {
        element.setAttribute("data-action", "open");
        var numberRemove = parseInt(element.getAttribute("data-number"));

        // Lặp qua và xóa dòng từ bảng
        var addedRows = document.getElementsByClassName(`${rowId}`);

      // Lặp qua và xóa từng dòng
        while (addedRows.length > 0) {
            addedRows[0].remove();
      }
    }
}





        function calculateSTT(data,rowIndex) {
            var result = [];

            data.forEach(function (row, index) {
                row.stt = rowIndex + "." + (index + 1);
                result.push(row);
            });
            return result;
        }
        function CallFIle(id,version) {
            Forms.LoadAjaxModal("/BU/Contract/ShowListFile?id=" + id + "&version=" + version);

        }
    function DetailContract(event, id) {
        console.log(id);
            event.preventDefault();
            Forms.LoadAjax('@Url.Action("Detail")' + '?id=' + id +'&version=0');
        }
        function CreateChildContract(event,id) {
            event.preventDefault();
            Forms.LoadAjax('@Url.Action("CreateContractChild")' + '?id=' + id);
    }

    function HandleSearch(inputElement) {
        var value = inputElement.value;
        var filter = value.toLowerCase();
        var table = document.getElementById('@gridId');
        var tr = table.getElementsByTagName('tr');
        var indexCell = Number.parseInt(inputElement.getAttribute('data-column'));

        for (let i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName('td')[indexCell];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = '';
                }
                else {
                    tr[i].style.display = 'none';
                }
            }
        }

    }

    function HandlerSearchSelect(indexCell, element) {
        var table = document.getElementById('@gridId');
        var tr = table.getElementsByTagName('tr');
        var value = element.value;
        var filter = "";
        var lstStatus = @Html.Raw(Json.Encode(lstStatus));
        if (indexCell == 14) {
            lstStatus = @Html.Raw(Json.Encode(lstPhase));
        }
        for (let i = 0; i < lstStatus.length; i++) {
            if (i == Number.parseInt(value)) {
                filter = lstStatus[i].Text;
                break;
            }
        }
        var filter = filter.toLowerCase();
        for (let i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName('td')[indexCell];
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toLowerCase().indexOf(filter) > -1) {
                    tr[i].style.display = '';
                }
                else {
                    tr[i].style.display = 'none';
                }
            }
        }
    }

</script>
<script>
    $(document).ready(function () {
        var currentDate = new Date();
        $('.startDate').val('01-01-2000'); // Năm 2000-01-01
        var currentYear = currentDate.getFullYear();
        var currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        var currentDay = currentDate.getDate().toString().padStart(2, '0');
        $('.finishDate').val(currentDay + '-' + currentMonth + '-' + currentYear); // Ngày hiện tại
    });
</script>

@{ Html.RenderPartial("Paging", Model); }
